id,title,description,presenters,date_created,date_modified,location,talk_dt,year,label
1,5 ways to deploy your Python web app in 2017,You’ve built a fine Python web application and now you’re ready to share it with the world. But what’s the best way to deploy your app in 2017?  This talk will demonstrate popular techniques for deploying Python web applications. We’ll start with a simple Flask application and expose it to the world five times over as we learn to use different tools and services available to the modern Python developer.  Specific topics covered include:   Exposing your local dev environment with ngrok Using a Platform-as-a-Service (PaaS) like Heroku Going “serverless” with AWS Lambda Configuring your own VM with Google Compute Engine Thinking inside the box using Docker   We’ll also briefly touch on the pros and cons of each technique to help you figure out which one is right for your app.  At the end of this talk you will have a basic understanding of how each of these techniques work and you’ll be ready to try them out yourself.,Andrew T. Baker,2018-04-19 00:59:20.151875,2018-04-19 00:59:20.151875,Portland Ballroom 252–253,2017-05-08 15:15:00.000000,2017,0.0
2,A gentle introduction to deep learning with TensorFlow,"Deep learning's explosion of spectacular results over the past few years may make it appear esoteric and daunting, but in reality, if you are familiar with traditional machine learning, you're more than ready to start exploring deep learning. This talk aims to gently bridge the divide by demonstrating how deep learning operates on core machine learning concepts and getting attendees started coding deep neural networks using Google's TensorFlow library.",Michelle Fullwood,2018-04-19 00:59:20.158338,2018-04-19 00:59:20.158338,Oregon Ballroom 203–204,2017-05-08 16:15:00.000000,2017,0.0
3,aiosmtpd - A better asyncio based SMTP server,"smtpd.py has been in the standard library for many years.  It's been a common tool for deploying SMTP and LMTP servers that handle email-based communication in Python, providing both basic protocol implementations and a fundamental module for higher level tools, such as lazr.smtptest for testing email clients.  Based on asyncore and asynchat, smtpd.py is showing its age, and its API is unwieldy.  Fortunately, there's a new alternative available.  aiosmtpd is a modern reinvention based on asyncio, with all the improvements that come along with such a new implementation.  It provides servers for both the SMTP and LMTP protocols, as well as a higher level ""controller"" API for testing SMTP and LMTP clients.  It exposes a much better API for customization, allowing the user to associate a simple ""handler"" to process incoming messages without having to worry about the details of the protocols, and it provides some useful hooks for subclassing.  This talk will describe the purpose and history of smtpd.py and aiosmtpd, show how users can extend the servers and implement specialized handlers, and show how applications can use the testing API for ensuring that their email sending applications do the right things.  Examples will be taken from GNU Mailman 3, which uses aiosmtpd extensively.",Barry Warsaw,2018-04-19 00:59:20.161866,2018-04-19 00:59:20.161866,Oregon Ballroom 203–204,2017-05-08 14:30:00.000000,2017,1.0
4,Algorithmic Music Generation,"Music is mainly an artistic act of inspired creation and is unlike some of the traditional math problems.  Music cannot be solved by a simple set of formulae. The most interesting and challenging part is producing unique music without infringing the copyright. The generated music has to sound good, and what sounds good is very subjective and varies from culture to culture.  Artificial Neural Network/Deep Learning has a wide range of applications, such as in Image processing, Natural language processing, Time series prediction, etc. But what about its usage in art? Could we use deep learning to create music?   This talk is about how deep learning models were used to produce music - catering particularly to Bollywood.  This talk would show how an exquisite piece of art i.e. music can be generated using deep learning model which helps in automated feature extraction. In order to automate the music generation, the model must be able to remember the learned features over the longer period of time, this is achieved by a special type of Recurrent Neural Network (RNN) called as LSTM (Long Short Term Memory) network.   Implementation of such complex model can be made much easier using inbuilt Python libraries such as Keras with Theano as backend. It allows for easy and fast prototyping. Packages like numpy and scipy are being used for easier mathematical computation of input vectors and for reading/writing the WAV files respectively. The neural network architecture makes use of numerous amount of music samples to train the model. After an adequate number of iterations and training time, this model generates music that is unique and original.   In this talk, steps involved in preprocessing of data, training the model, testing the model and generating the music from the trained model will be discussed. This talk will also cover some of the challenges and tradeoffs made for algorithmic music generation.",Padmaja V Bhagwat,2018-04-19 00:59:20.165526,2018-04-19 00:59:20.165526,Portland Ballroom 251 & 258,2017-05-08 17:10:00.000000,2017,0.0
5,An Introduction to Reinforcement Learning,"Reinforcement learning (RL) is a subfield of machine learning focused on building agents: software that can robustly achieve a desired objective under varying states of the world. This introduction will provide you with an overview of RL and tools to build your own agents.  In this talk, we will provide an overview of terminology in reinforcement learning and a Jupyter Notebook outlining basic algorithms to learn 'policies', strategies for an agent, and visualize them with numpy, pandas, and seaborn.  Newer developments in reinforcement learning apply deep learning to improve performance.  We will further discuss deep reinforcement learning and how to use deep learning libraries, such as TensorFlow or Theano, with the latest RL libraries: OpenAI Gym, OpenAI Universe, and DeepMind Lab.",Jessica Forde,2018-04-19 00:59:20.169075,2018-04-19 00:59:20.169075,Portland Ballroom 252–253,2017-05-08 13:40:00.000000,2017,0.0
6,async/await and asyncio in Python 3.6 and beyond,"The talk overviews async/await, asynchronous generators and comprehensions in Python 3.6 and the asyncio module. We'll discuss when and how asyncio should be used in a modern applications and services, what is uvloop, and what asyncio frameworks and libraries one should use. I'll share our ideas about where asyncio is headed and what to expect in Python 3.7.",Yury Selivanov,2018-04-19 00:59:20.172481,2018-04-19 00:59:20.172481,Oregon Ballroom 203–204,2017-05-08 13:10:00.000000,2017,0.0
7,Asynchronous Python for the Complete Beginner,"With the introduction of the asyncio package in Python 3.4, you can hear lots of people talking about asynchronous programming, most in a favorable way, some not so much. In this talk, I will tell you what this async fever is about and what can it do for you that regular Python can't, not only with asyncio, but also with other frameworks that existed long before it.",Miguel Grinberg,2018-04-19 00:59:20.176699,2018-04-19 00:59:20.176699,Oregon Ballroom 203–204,2017-05-08 13:50:00.000000,2017,0.0
8,Automate AWS With Python,"AWS is one of the best-known cloud vendors. Using the Web UI is fine when starting out, but automating cloud operations is important. Boto3 provides a great Pythonic API to AWS, but using it correctly can be subtle.  The talk will cover how to automate AMI builds, building Cloud Formation Templates and automating S3 bucket management.",Moshe Zadka,2018-04-19 00:59:20.182110,2018-04-19 00:59:20.182110,Portland Ballroom 252–253,2017-05-08 10:50:00.000000,2017,1.0
19,"Decorators, unwrapped: How do they work?","Decorators are a syntactically-pleasing way of modifying the behavior of functions in Python. However, they can be highly opaque to Python beginners. It took me a while to learn how to write one, and even after I was confident writing my own decorators, felt like they were magical. The goal of this talk is to demystify decorators by methodically stepping through how and why they work. Along the way we'll touch on closures, scopes, and how Python is compiled.",Katie Silverio,2018-04-19 00:59:20.245856,2018-04-19 00:59:20.245856,Oregon Ballroom 201–202,2017-05-08 14:35:00.000000,2017,1.0
9,Awesome Command Line Tools,"Designing a good command line tool is challenging. Command line tools look archaic compared to modern graphical interfaces, discoverability is a big issue for command line tools, proactive help is hard to implement. This talk will cover a set of specific techniques to help alleviate those challenges.  How did pgcli and mycli overcome these problems? We will cover specific examples where command line apps shine. The examples will be drawn from pgcli, mycli and bpython. This talk will suggest libraries and show how they can help you implement a wonderful command line interface.   The libraries covered in this talk include python-prompt-toolkit,  pygments, click, fuzzyfind.  The goal of the talk is to distil the ideas that exist in successful command line applications as guidelines for building powerful command line applications.",Amjith Ramanujam,2018-04-19 00:59:20.188953,2018-04-19 00:59:20.188953,Portland Ballroom 252–253,2017-05-08 11:30:00.000000,2017,1.0
10,Bayesian Statistical Analysis with Python,"You've got some data, and now you want to analyze it with Python. You're on your way to greatness! Now the problem comes: do I do the t-test? Chi-squared test? How do I decide? In this talk, inspired by many Pythonista Bayesians (@jakevdp, @allendowney, @twiecki, @fonnesbeck) before, I will show you how you can take common statistical decision problems, formulate them as a Bayesian analysis problem, and use PyMC3 as your workhorse tool for gaining insights. This talk will be math-light and code-heavy, and if you download the slides, you'll have a simple template for more complex Bayesian analysis down the road!",Eric J. Ma,2018-04-19 00:59:20.193864,2018-04-19 00:59:20.193864,Portland Ballroom 251 & 258,2017-05-08 14:30:00.000000,2017,0.0
11,"Big picture software testing: unit testing, Lean Startup, and everything in-between","There are many ways you can test your software: unit testing, manual testing, end-to-end testing, and so forth. Take a step back and you'll discover even more form of testing, many of them very different in their goals: A/B testing, say, where you see which of two versions of your website results in more signups or ad clicks.  How do these forms of testing differ, how do they relate to each other? How do you choose which kind of testing to pursue, given limited time and resources? How do you deal with strongly held yet opposite views arguing either that a particular kind of testing is essential or that it's a waste time?  This talk will provide you with a model, a way to organize all forms of testing and understand what exactly they provide, and why. Once you understand the model you will be able to choose the right form of testing for your situation and goals.",Itamar Turner-Trauring,2018-04-19 00:59:20.203517,2018-04-19 00:59:20.203517,Portland Ballroom 252–253,2017-05-08 11:30:00.000000,2017,0.0
12,"Building A Gigaword Corpus: Lessons on Data Ingestion, Management, and Processing for NLP","As the applications we build are increasingly driven by text, doing data ingestion, management, loading, and preprocessing in a robust, organized, parallel, and memory-safe way can get tricky. This talk walks through the highs (a custom billion-word corpus!), the lows (segfaults, 400 errors, pesky mp3s), and the new Python libraries we built to ingest and preprocess text for machine learning.  While applications like Siri, Cortana, and Alexa may still seem like novelties, language-aware applications are rapidly becoming the new norm. Under the hood, these applications take in text data as input, parse it into composite parts, compute upon those composites, and then recombine them to deliver a meaningful and tailored end result. The best applications use language models trained on domain-specific corpora (collections of related documents containing natural language) that reduce ambiguity and prediction space to make results more intelligible. Here's the catch: these corpora are huge, generally consisting of at least hundreds of gigabytes of data inside of thousands of documents, and often more!  In this talk, we'll see how working with text data is substantially different from working with numeric data, and show that ingesting a raw text corpus in a form that will support the construction of a data product is no trivial task. For instance, when dealing with a text corpus, you have to consider not only how the data comes in (e.g. respecting rate limits, terms of use, etc.), but also where to store the data and how to keep it organized. Because the data comes from the web, it's often unpredictable, containing not only text but audio files, ads, videos, and other kinds of web detritus. Since the datasets are large, you need to anticipate potential performance problems and ensure memory safety through streaming data loading and multiprocessing. Finally, in anticipation of the machine learning components, you have to establish a standardized method of transforming your raw ingested text into a corpus that's ready for computation and modeling.  In this talk, we'll explore many of the challenges we experienced along the way and introduce two Python packages that make this work a bit easier: Baleen and Minke. Baleen is a package for ingesting formal natural language data from the discourse of professional and amateur writers, like bloggers and news outlets, in a categorized fashion. Minke extends Baleen with a library that performs parallel data loading, preprocessing, normalization, and keyphrase extraction to support machine learning on a large-scale custom corpus.",Rebecca Bilbro,2018-04-19 00:59:20.209353,2018-04-19 00:59:20.209353,Portland Ballroom 251 & 258,2017-05-08 16:30:00.000000,2017,0.0
13,Building Stream Processing Applications,"Do you have a stream of data that you would like to process in real time? There are many components with Python APIs that you can put together to build a stream processing application. We will go through some common design patterns, tradeoffs and available components / frameworks for designing such systems. We will solve an example problem during the presentation to make these points concrete. Much of what will be presented is based on experience gained from building production pipelines for the real-time processing of ad streams at Yelp. This talk will cover topics such as consistency, availability, idempotency, scalability, etc.","Amit Ramesh, Qui Nguyen",2018-04-19 00:59:20.214731,2018-04-19 00:59:20.214731,Oregon Ballroom 201–202,2017-05-08 14:30:00.000000,2017,1.0
14,Community powered packaging: conda-forge,"The Python scientific community always wanted a package manager that is cross platform, does not require sudo, and lets Python be awesome! The conda package manager solved that problem, but created a new ones...  This talk is a tour disguised as a beginner tutorial to conda-forge packaging. We will try to discuss some myths and misconceptions about conda and conda-forge, as well as a quick comparison with pip and wheels.",Filipe Pires Alvarenga Fernandes,2018-04-19 00:59:20.220067,2018-04-19 00:59:20.220067,Oregon Ballroom 201–202,2017-05-08 13:55:00.000000,2017,0.0
15,Constructive Code Review,"“Your code is bad and you are bad. Have a bad day.” Too many code reviews feel like this, and it saps the enthusiasm that drives open source. Instead, let’s explore how to give reviews that are truthful but encouraging, boosting the skill level of contributors and the quality of the project. We’ll look at “tact hacks” that nudge communication in a friendly direction, antipatterns to avoid, the pesky human emotions that can tempt us into reviewing poorly, and techniques for leveling up newcomers without losing all your coding time.",Erik Rose,2018-04-19 00:59:20.224593,2018-04-19 00:59:20.224593,Portland Ballroom 254–255,2017-05-08 15:15:00.000000,2017,0.0
16,Cython as a Game Changer for Efficiency,"Are you running a Web application? Do you suffer from CPU bottlenecks that slow down your growth? There's a tool that can easily fix all that, and then some. C++ knowledge not required.  Come learn how Instagram, the world's largest Django deployment with more than 600M active users, saved ~30% of global CPU by rewriting a handful of modules on the critical path in Cython. Learn to apply those techniques to your own projects with little effort and stop worrying about switching to other programming languages or rewriting stable components in C++.",Alex Orlov,2018-04-19 00:59:20.229240,2018-04-19 00:59:20.229240,Portland Ballroom 251 & 258,2017-05-08 17:10:00.000000,2017,1.0
17,Dask: A Pythonic Distributed Data Science Framework,"Dask is a general purpose parallel computing system capable of Celery-like task scheduling, Spark-like big data computing, and Numpy/Pandas/Scikit-learn level complex algorithms, written in Pure Python.  Dask has been adopted by the PyData community as a Big Data solution.  This talk focuses on the distributed task scheduler that powers Dask when running on a cluster.  We'll focus on how we built a Big Data computing system using the Python networking stack (Tornado/AsyncIO) in service of its data     science stack (NumPy/Pandas/Scikit Learn).  Additionally we'll talk about the  challenges of effective task scheduling in a data science context (data        locality, resilience, load balancing) and how we manage this dynamically with  aggressive measurement and dynamic scheduling heuristics.",Matthew Rocklin,2018-04-19 00:59:20.233945,2018-04-19 00:59:20.233945,Portland Ballroom 252–253,2017-05-08 16:15:00.000000,2017,0.0
18,"Debugging in Python 3.6: Better, Faster, Stronger","Python 3.6 was released in December of 2016 and it has a lot of new cool features. Some of them are quite easy for using: a developer can read, for example, about f-strings and they can start using them in their programs as soon as possible. But sometimes features are not so evident, and a new frame evaluation API is one of them.  The new frame evaluation API was introduced to CPython in PEP 523 and it allows to specify a per-interpreter function pointer to handle the evaluation of frames. It might not be evident how to use this new feature in everyday life, but it’s quite easy to understand how to build a fast debugger based on it.  In this talk we are going to explain how standard way of debugging in Python works and how a new frame evaluation API may be useful for creating the fast debugger. Also we will consider why such fast debugging was not possible in the previous versions of Python. If someone hasn’t made a final decision to move to Python 3.6 this talk will provide some new reasons to do it.",Elizaveta Shashkova,2018-04-19 00:59:20.238762,2018-04-19 00:59:20.238762,Oregon Ballroom 201–202,2017-05-08 10:50:00.000000,2017,1.0
20,Designing secure APIs with state machines,"Did you ever need to create an application whose behavior varies with its state, while still presenting a consistent interface to its callers? A good, layered design using state machines can help avoid the tedious 'if' checks for flags, and ensure that if your code runs at all, it will run with all the required values initialized.  I will demonstrate this with examples, and talk about some available tools and libraries to build state machines in Python.        I will also discuss how to effectively use the process of threat modeling to build secure web applications. Threat modeling is a computer security technique that helps you better understand the systems you create, identify attacks, and build defenses. I will talk about things that we, as software developers, can do to assess the security of our applications in the real world through this process.","Ashwini Oruganti, Mark Williams",2018-04-19 00:59:20.261740,2018-04-19 00:59:20.261740,Portland Ballroom 251 & 258,2017-05-08 14:35:00.000000,2017,1.0
21,Dial M For Mentor,"One of the nicest things about Python community is the availability of mentors willing to help you. Various mentors have helped me navigate the open source community and help advanced my skills. I realized finding a mentor is not as easy as it seems, and it takes a lot of courage to reach out in the first place. And then, there is impostor syndrome, where one may feel like they don’t deserve the help. In this talk, I will provide advice about working with a mentor. Asking for help is not a failure.",Mariatta Wijaya,2018-04-19 00:59:20.270133,2018-04-19 00:59:20.270133,Portland Ballroom 254–255,2017-05-08 13:55:00.000000,2017,1.0
22,"Dr. Microservices, Or How I Learned to Stop Worrying and Love the API","Assuming that you already know how to build a monolithic app, you must be wondering how you can use all this ""microservice"" stuff that you keep hearing about. Well, a good word of advice is that you probably don't need it. If designed properly, a monolithic app should be able to scale and fit the needs of most businesses. Even so, you should keep your development as simple as possible until you have proven and solidified your business concepts. But if you do need to grow to Internet scale, then you have a long road ahead of you.  Moving from a monolithic application to microservices is a natural evolution that is often of necessity. There are several competing schools of thought that are still being battle-tested in these early days of microservice architecture. Among all the competing paradigms, most of the requirements can be agreed upon, but are mostly differentiated by the tools used to fulfill the requirements.  This talk will cover setting up the required infrastructure, and demonstrate how to migrate a sample monolithic Django application into a microservices platform.  The demo application will use the following technologies: Django, Flask, Fabric, Terraform, Ansible, CentOS, Docker, Mesos, Consul, Nginx, Pgbouncer, Kafka",Ryan Anguiano,2018-04-19 00:59:20.274702,2018-04-19 00:59:20.274702,Portland Ballroom 252–253,2017-05-08 14:35:00.000000,2017,0.0
23,Ending Py2/Py3 compatibility in a user friendly manner,"   ""Four shalt thou not count, neither count thou two, excepting that thou   then proceed to three.""           Monty Python and the Holy Grail; Scene 33      Python 3 has been around for more than eight years, and much of the Python ecosystem is now available both on Python 2 and Python 3, often using a single code base. Nonetheless, this compatibility comes at a development cost and some library authors are considering ending support for Python 2 . These once-python-2-compatible libraries are at risk of being upgraded on non compatible system and cause user (and developer) frustration.  While it may seem simple to cease support for Python 2, the challenge is not in ending support, but doing so in a way that does not wreak havoc for users who stay on Python 2. And that is not only a communications problem, but a technical one : up until recently, it was impossible to tag a release as Python 3 only; today it is possible.  Like any maintainer of a widely used library, we want to ensure that users continue to use Python 2 continue to have functioning libraries, even after development proceeds in a way that does not support Python 2.   One approach is to ensure easy installation of older versions if possible avoid incompatible versions altogether. Users should not need to manually pin maximal version dependencies across their development environments and projects if all they want is to use the latest versions of libraries that are compatible with their system.  Even if we did expect that of users, consider what would happen when a package they rely on converts to be only Python 3 compatible. If they were not tracking the complete dependency tree, they might discover, on  upgrade, that their projects no longer work. To avert this they would need to pin those at the last version compatible with Python 2. Users that want to use older python versions should not have to go through so much anguish to do so.   In order to solve this problem, and thereby make both users' and maintainers' lives easier, we ventured into the rabbit-hole called Packaging.  Though we set off with a singular quest, our tale roves through many lands. We'll narrate the story of our amending PEPs, our efforts in building the ramparts of the pypa/Warehouse Castle, battles with the dragons of Pip, and errands in the ""land of no unit tests"" otherwise known as PyPI legacy.  By the end of the above tale, the audience members will know the road to Python 3 only libraries had once had hazards that are now easily avoidable. So long as users upgrade their package management tools.","Matthias Bussonnier, Min Ragan-Kelley, M Pacer, Thomas Kluyver",2018-04-19 00:59:20.278857,2018-04-19 00:59:20.278857,Portland,2017-05-08 15:15:00.000000,2017,1.0
24,Executing python functions in the linux kernel by transpiling to bpf,ebpf is a linux kernel byte-code which can be used for functionality ranging from tracing system calls with kprobe to routing packets with tc.  This talk is about a pure-python front-end for ebpf that allows users to write simple python functions to be executed in the kernel.  I'll first explain how this was made to work and then I'll show off some of the features/capabilities of this approach with working examples.,Alex Gartrell,2018-04-19 00:59:20.285635,2018-04-19 00:59:20.285635,Portland Ballroom 254–255,2017-05-08 15:15:00.000000,2017,0.0
25,Experiment Assignment on the Web,"A popular way of improving websites is to run experiments on it. We split users into groups, show two or more variations of the site, measure how well each one does, and then show the best version to everyone. In this talk, I'll walk through a toy Python program that does the first step: splits users into groups. A few interesting problems arise: grouping users, whitelists, and scaling. I'll share different ways to address them. I'll also give examples of things that can go terribly wrong when designing experiment assignment code.",Jessica Stringham,2018-04-19 00:59:20.291799,2018-04-19 00:59:20.291799,Oregon Ballroom 203–204,2017-05-08 10:50:00.000000,2017,1.0
26,Exploring Network Programmability with Python and YANG,"Recently, networking vendors and Silicon Valley giants have been putting forth a concerted effort to build standardized models for networking devices. These models allow for building reusable and versatile scripts with predictable, standardized data. Without such models, the wide variety of inputs and outputs required by different devices and vendors made scripting a tedious and challenging endeavor. The modeling language in use is called YANG, and a variety of standards have emerged. A vendor agnostic standard called OpenConfig has lately become stable enough to begin programming devices with it. Using Python, YANG is surprisingly easy to work with, and extremely powerful applications can be written with basic knowledge of JSON or XML and RPCs.   The talk will start with use-cases for programming networking devices, and will detail a specific, trivial, use case that will be used in the talk. Next, we will discuss the ‘legacy’ way of programming devices (SSH and screenscraping), and highlight the challenges, such as complex regular expressions, slow responses, and lack of reusability between devices. From there we will dive into YANG, focusing on OpenConfig models. A YANG model is essentially a template, and JSON or XML can be mapped to the YANG template. This makes it perfect for Pythonic manipulation. In the use case there will be a GET RPC returning a YANG representation of the box’s state in JSON, which we will search for the relevant health indicator by drilling down in the JSON dictionary. A simple change to the dictionary will remediate the problem, and a PATCH RPC merges the new configuration onto the box. Since open, standard models are in use, this script could be run on many devices across a network to achieve the same effect with no changes needed. We will finish up with the pros and cons of YANG before opening the talk for Q&A.",Lisa N Roach,2018-04-19 00:59:20.296175,2018-04-19 00:59:20.296175,Portland Ballroom 252–253,2017-05-08 12:10:00.000000,2017,1.0
27,"Factory Automation with Python - Stories about Robots, Serial Ports, and Barcode Readers","In industrial automation tried and tested always beats latest and greatest: The machines that make smartphones have a serial port and are configured with .csv files. But when your factory automates complex non-linear workflows and is jam-packed with sensors and robots, you are quickly faced with software engineering challenges that call for modern tools.  Python turns out to be surprisingly versatile in this setting, whether for prototyping a single conveyor belt or taming a building full of robots. This talk explains how to use Python for interfacing with two common industrial automation devices: a barcode scanner and a Programmable Logic Controller (PLC). After a simple demo, you’ll hear about lessons learned using Python packages that weren’t written with robots in mind, like Celery and pandas, with robots.",Jonas Neubert,2018-04-19 00:59:20.300273,2018-04-19 00:59:20.300273,Oregon Ballroom 203–204,2017-05-08 14:35:00.000000,2017,0.0
28,Fuzzy Search Algorithms: How and When to Use Them,"Fuzzy Searching or approximate string matching is powerful because often text data is messy. For example, shorthand and abbreviated text are common in various data sets. In addition, outputs from OCR or voice to text conversions tend to be messy or imperfect. Thus, we want to be able to make the most of our data by extrapolating as much information as possible.   In this talk, we will explore the various approaches used in fuzzy string matching and demonstrate how they can be used as a feature in a model or a component in your python code. We will dive deep into the approaches of different algorithms such as Soundex, Trigram/n-gram search, and Levenshtein distances and what the best use cases are. We will also discuss situations where it’s important to take into account the meaning or intent of a word and demonstrate approaches for measuring semantic similarity using nltk and word2vec. Furthermore, we will demonstrate via live coding how to implement some of these fuzzy search algorithms using python and/or built-in fuzzy search functions within PostgreSQL.",Jiaqi Liu,2018-04-19 00:59:20.305098,2018-04-19 00:59:20.305098,Oregon Ballroom 203–204,2017-05-08 17:10:00.000000,2017,0.0
29,Gothic Colors: Using Python to understand color in nineteenth-century literature,"Do you love literature and programming? Have you ever been curious about what the heck “Digital Humanities” are? Join us for a quick survey of what’s going on in this growing field and learn about a specific project, “Gothic Colors” where we set out to enumerate and analyze color references and mood in 19th century Gothic novels, using Python and a couple of popular libraries.","Eleanor Stribling, Caroline Winter",2018-04-19 00:59:20.309869,2018-04-19 00:59:20.309869,Portland Ballroom 254–255,2017-05-08 14:30:00.000000,2017,0.0
30,Grok the GIL: Write Fast And Thread-Safe Python,"I wrote Python for years while holding mistaken notions about the Global Interpreter Lock, and I've met others in the same boat. The GIL's effect is simply this: only one thread can execute Python code at a time, while N other threads sleep or await network I/O. Let's read CPython interpreter source and try some examples to grok the GIL, and learn to write fast and thread-safe Python.",A. Jesse Jiryu Davis,2018-04-19 00:59:20.315929,2018-04-19 00:59:20.315929,Oregon Ballroom 201–202,2017-05-08 12:10:00.000000,2017,0.0
31,Hacking Cars with Python,"Modern cars are networks of computers, and a high end vehicle could have nearly 100 different computers inside. These devices control everything from the engine to the airbags. By understanding how these systems work, we can interface with vehicles to read data, perform diagnostics, and even modify operation.  In this talk, we'll discuss pyvit, the Python Vehicle Interface Toolkit. This library, combined with some open source hardware, allows developers to talk to automotive controllers from Python.   We will begin with an introduction to automotive networks, to provide a basis for understanding the tools. Next, we will look at the tools and show the basics of using them. Finally, we'll discuss real world applications of these tools, and how they're being used in the automotive world today.",Eric Evenchick,2018-04-19 00:59:20.321994,2018-04-19 00:59:20.321994,Portland Ballroom 252–253,2017-05-08 14:30:00.000000,2017,0.0
32,Hacking Classic Nintendo Games with Python,"Do you feel like using your superpowers as a developer to bring the games of your childhood into the future with the power of the Internet? In this live coded journey, we'll build an SMS powered ""Game Genie"" allowing the audience to send text messages to manipulate the Nintendo games being played in real time. This will involve working with Flask, the Twilio API, the FCEUX NES emulator and how to bridge them with quick Lua scripts.",Sam Agnew,2018-04-19 00:59:20.326760,2018-04-19 00:59:20.326760,Portland Ballroom 252–253,2017-05-08 13:10:00.000000,2017,0.0
33,"How documentation works, and how to make it work for your project","Nearly everyone (especially in the Python community) agrees that good documentation is important to the success of software projects, and yet very few projects actually have good documentation.  Often, it's not for want of effort - the project's developers have worked hard on it - nor for lack of documentation - the authors have produced a lot of it.   It simply turns out to be not very good - not helpful enough for the users who should be able to rely on it, and a depressing chore for the authors who have to maintain it.  The good news is that both these problems can be solved by understanding how documentation works, and what its different functions are. Structuring documentation according to those distinct functions helps ensure that each of them is adequately served. It also makes it far easier to write and maintain.  Using real-life examples I'll draw out the key functions of documentation, and how they map onto different ways of writing it. Putting this into practice is simple when armed with some basic guidelines. The benefits are huge, and available with a minimum of effort.  I won't be discussing documentation tools or software or other topics that have been covered amply elsewhere, but some neglected aspects of software documentation that will make your software projects more successful.",Daniele Procida,2018-04-19 00:59:20.334223,2018-04-19 00:59:20.334223,Portland Ballroom 254–255,2017-05-08 11:30:00.000000,2017,0.0
34,How to make a good library API,"It's not easy to write libraries with great APIs. We're aware of that. However, it's not always clear how we can follow abstract ideals like elegance, simplicity, and extensibility to improve our APIs. That's why in this talk we'll discuss good and bad APIs with real-world examples. For each thing learned, we'll come up with a checklist to help us with practical advice for writing good APIs.",Flávio Juvenal,2018-04-19 00:59:20.339458,2018-04-19 00:59:20.339458,Oregon Ballroom 203–204,2017-05-08 14:35:00.000000,2017,0.0
35,How to write a Python transpiler,"We all know Python is a powerful and expressive programming language. What you may not know is how much of the internals of Python itself is exposed for you to use and manipulate.  In this talk, you'll be introduced to the tools and libraries Python provides to manipulate the compilation and execution of Python code. You will also see how you can use those tools to target execution environments other than the CPython virtual machine.",Russell Keith-Magee,2018-04-19 00:59:20.343863,2018-04-19 00:59:20.343863,Portland Ballroom 254–255,2017-05-08 13:55:00.000000,2017,1.0
36,Human-Machine Collaboration for Improved Analytical Processes,"Over the last several years, Python developers interested in data science and analytics have acquired a variety of tools and libraries that aim to facilitate analytical processes. Libraries such as Pandas, Statsmodels, Scikit-learn, Matplotlib, Seaborn, and Yellowbrick have made tasks such as data wrangling, statistical modeling, machine learning, and data visualization much quicker and easier. They have accomplished this by automating and abstracting away some of the more tedious, repetitive processes involved with analyzing and modeling data.   Over the next few years, we are sure to witness the introduction of new tools that are increasingly intelligent and have the ability to automate more complex analytical processes. However, as we begin using these tools (and developing new ones), we should strongly consider the level of automation that is most appropriate for each case. Some analytical processes are technically difficult to automate, and therefore require large degrees of human steering. Others are relatively easy to automate but perhaps should not be due to the unpredictability of results or outputs requiring a level of compassionate decision-making that machines simply don’t possess. Such processes would benefit greatly from the collaboration between automated machine tasks and uniquely human ones. After all, it is often systems that utilize a combination of both human and machine intelligence that achieve better results than either could on their own.   In this talk, we will discuss human-machine collaboration as it applies to analyzing data with Python. We will review a framework for exploratory data analysis with the goal of identifying which tasks should be automated, which tasks should not, and which tasks would benefit from a more interactive, symbiotic, and collaborative process between the human and the machine. We will explore Python libraries that we can use to build tools that allow us to perform different types of analysis. We’ll also introduce the Cultivar project, an example of a hybrid analytics tool that combines a Django framework with Javascript visualizations and Celery for task management to facilitate more efficient and effective human-machine systems for data analysis.",Tony Ojeda,2018-04-19 00:59:20.350535,2018-04-19 00:59:20.350535,Portland Ballroom 252–253,2017-05-08 14:35:00.000000,2017,1.0
37,I Installed Python 3.6 on Windows and I Liked It,"Python has a great reputation as a cross-platform language, which for many people means different varieties of Linux. But a huge number of Python users are running on Windows - a fundamentally different operating system where things do not always work the same. However, Python has always worked incredibly well across different platforms including Windows, going to great lengths to support and expose the platform without making development more complex. In this session, CPython core developer and Microsoft engineer Steve Dower will discuss some of the reasons why cross-platform support is not an accident, and how Python 3.6 makes it even easier to support both Windows and Linux.",Steve Dower,2018-04-19 00:59:20.357638,2018-04-19 00:59:20.357638,Portland Ballroom 251 & 258,2017-05-08 15:15:00.000000,2017,0.0
38,Immutable Programming - Writing Functional Python,"The world of Haskell and functional programming may seem like a distant place to many working Python developers, but some of the techniques used there are remarkably useful when developing in Python.  In this talk, I will cover some of the pitfalls of mutability that you may run into while writing Python programs, and some tools and techniques that Python has built in that will let you avoid them. You'll see namedtuples, enums and properties, and also some patterns for structuring immutable programs that will make them easier to build, extend, and test.",Calen Pennington,2018-04-19 00:59:20.362162,2018-04-19 00:59:20.362162,Portland Ballroom 254–255,2017-05-08 11:30:00.000000,2017,1.0
39,Implementing Concurrency and Parallelism From The Ground Up,"When writing an application, it is common to want to do many things at once. For web servers, this is serve multiple web requests, for GUI applications it's doing a background task whilst keeping the UI responsive. But how do we actually do that? This talk will go into how concurrency and parallelism work from the CPU, OS, and threads up, how state (data) is shared between them, and how this interacts with the functions that you, the programmer, write, and how you can write properly behaving concurrent or parallel software.",Amber Brown,2018-04-19 00:59:20.366701,2018-04-19 00:59:20.366701,Oregon Ballroom 203–204,2017-05-08 13:40:00.000000,2017,0.0
40,In-Memory Event Resequencing: Realistic Testing For Impossible Bugs,"As we all know, we should write testable code, and automated tests.  But as we also know, no test plan survives contact with the real world.  Complex, distributed systems fail in complex, distributed ways, and even the simplest web app today is a complex distributed system.  So, as our code accrues little fixes to bugs that only show up in production, our test suites eventually either become slow integration testing monstrosities that are ""realistic"" but flaky and unreliable, or useless piles of mocks which are fast and deterministic but don't give you confidence.  In this talk, we'll explore how to leverage event-driven programming, or ""async I/O"", to structure code in such a way that its tests are fast, realistic, and reliable, even in the face of horrible race-conditions you only discover in production.",Glyph,2018-04-19 00:59:20.370972,2018-04-19 00:59:20.370972,Portland Ballroom 252–253,2017-05-08 10:50:00.000000,2017,0.0
41,Instagram Filters in 15 Lines of Python,"Images tell stories, and we love Instagram filters because they give emotion to our images. Do you want to explore what makes up Instagram filters? In this talk, we will talk about the basic elements of Instagram filters and implement them in Python. The staple libraries we will use are scikit-image and numpy - matplotlib and jupyter notebooks for plotting and interactivity. In the end, we will implement the (now-defunct) Gotham Instagram filter in 15 lines of Python (not including imports). Throughout the process, there will be many pretty pictures.",Michele Pratusevich,2018-04-19 00:59:20.375769,2018-04-19 00:59:20.375769,Oregon Ballroom 201–202,2017-05-08 14:35:00.000000,2017,1.0
42,Introduction to Threat Modeling,"Are you a website or application developer? Are you worried about security?  Don’t know what you need to know, and what you can safely leave to the experts?  Come learn about how to analyze your application’s design for potential security flaws, how to think like a security engineer, and see some of the most common pitfalls that programs fall victim to.  In this talk we will work through the process of threat modeling - understanding how your system might get attacked, what its weak points are, and how to defend it.","Ying Li, David Lawrence",2018-04-19 00:59:20.381257,2018-04-19 00:59:20.381257,Portland Ballroom 254–255,2017-05-08 12:10:00.000000,2017,0.0
43,It's time for datetime,"Working with time is not a trivial challenge. Python includes a native module in the standard library to work with it but datetime keeps being together with unicode a common source of errors. This often leads to the widespread of many other libraries in the attempt of easing the work of working with datetime. Datetime is one of those API that looks easy to use but given the many concepts around time, is it easy to get backfired if the developer has not solid knowledge about the them.  In this talk we will overview the main concepts about timestamps represented through datetime objects, the limitations on the standard library and some simple steps to try to avoid the common mistakes that everyone can fall into.  Naive datetimes (which the datetime API works by default with) are a great tool to represent calendar times, but when talking about timestamps (focus of this talk) timezones is n essential part of it and the datetime module can be tricky to use for that use cases.  We will also speak about different standards of time, time zones, Daylight Saving Times, leap seconds, serialization and datetime arithmetics.  The talk will be focused on giving the foundations that everyone knows to be able to understand and work efficiently and without making painful mistakes when dealing with time related algorithms.",Mario Corchero,2018-04-19 00:59:20.386504,2018-04-19 00:59:20.386504,Oregon Ballroom 203–204,2017-05-08 10:50:00.000000,2017,0.0
44,Know thy self: Methods and method binding,"Methods are like functions, but different. How? Why? And what's will having to type ""self"" all the time?  We'll explore partial application of functions and review why it might be nice to start using classes. Then to clarify how method objects work we'll examine the result of accessing the method attributes of an object without calling them. Understanding the behavior we uncover here will require more attribute lookup experiments, which will lead us discover the power of descriptors.  Along the way we'll peek in at other languages' approaches to method binding, hopefully coming to appreciate the way Python does things enough to type ""self"" a few thousand more times.",Thomas Ballinger,2018-04-19 00:59:20.391284,2018-04-19 00:59:20.391284,Oregon Ballroom 201–202,2017-05-08 13:55:00.000000,2017,1.0
45,Level up! Rethinking the Web API framework.,"Think there's nothing left to explore in how we design Web API frameworks? Think again.  The author of Django REST framework walks through how we might approach designing a new Python-based API framework from scratch, and looks at how we can start building smarter, more productive API tooling as a result.  You should come away from this talk with a better appreciation of:   How best to provide API client libraries and API documentation to your users. How to build APIs that support both realtime and request/response interfaces. How to build APIs that are web-browsable. Why you might want to consider taking a schema-first approach to your API design.",Tom Christie,2018-04-19 00:59:20.397469,2018-04-19 00:59:20.397469,Portland Ballroom 254–255,2017-05-08 12:10:00.000000,2017,0.0
46,Leveraging Serverless Architecture for Powerful Data Pipelines,"Serverless Architectures that allow us to run python functions in the cloud in an event-driven parallel fashion can be used to create extremely dynamic and powerful data pipelines for use in ETL and data science. Join me for an exploration of how to build data pipelines on Amazon Web Services Lambda with python. We'll cover a single introduction to event-driven programming. Then, we'll walk through building an example pipeline while discussing some of the frameworks and tools that can make building your pipeline easier.  Finally, we'll discuss how to maintain observability on your pipeline to ensure proper performance and troubleshooting information.",Jason Myers,2018-04-19 00:59:20.405569,2018-04-19 00:59:20.405569,Portland Ballroom 252–253,2017-05-08 17:10:00.000000,2017,0.0
47,Library UX: Using abstraction towards friendlier APIs,"Complicated libraries can be a pain in the butt to use. It's not surprising that there are a lot of ""X for humans"" libraries out there, some of which are mostly wrappers around more frustrating interfaces.  This is not a theoretical talk. I'll touch upon theory to give you context, but will then talk about what that means for you in practice so that you can write better libraries. I'll talk about why library UX matters, about abstraction as a general concept, about out what happens when you over/under abstract, and about some useful tips to help build friendly APIs. Meanwhile, I'll show some positive examples from libraries we know and love (flask, SQLAlchemy, Requests, etc). Once you recognize these effects in play, you'll be able to apply them to your own code and make life better for everyone!",Mali Akmanalp,2018-04-19 00:59:20.410333,2018-04-19 00:59:20.410333,Oregon Ballroom 203–204,2017-05-08 15:15:00.000000,2017,0.0
48,"Lights, camera, action! Scraping a great dataset to predict Oscar winners","Using Jupyter notebooks and scikit-learn, you’ll predict whether a movie is likely to win an Oscar or be a box office hit. Together, we’ll step through the creation of an effective dataset: asking a question your data can answer, writing a web scraper, and answering those questions using nothing but Python libraries and data from the Internet.",Deborah Hanus,2018-04-19 00:59:20.415176,2018-04-19 00:59:20.415176,Portland Ballroom 252–253,2017-05-08 15:15:00.000000,2017,0.0
49,Look mum no hands! From blinking LEDs to a bike speedometer with MicroPython,"In this talk I will show you how to use a micro-controller to build a wifi enabled speedometer for your bike, using MicroPython. And some hardware. And a bike (maybe). I will introduce you to the world of MicroPython: a python distribution that runs on micro-controllers. Micro-controllers are small computers that are all around us: in cars, TVs, and your internet connected fridge. We will start with making LEDs blink, then serve webpages, build an interrupt handler and finally put it all together to make a wifi enabled speedometer for a bike.",Tim Head,2018-04-19 00:59:20.419135,2018-04-19 00:59:20.419135,Portland Ballroom 252–253,2017-05-08 13:50:00.000000,2017,0.0
50,Looping Like a Pro in Python,"The humble loop: it's hard to write a program without it. Whether it's processing numbers in a sequence, lines in a text file, users in a database, or any other list of things, you use loops all the time. But did you know that Python has a lot of different ways to write loops? Reaching for the right looping tool can make your code cleaner, more readable, easier to test, and it can even make it run faster! By the end of this talk, you'll be looping like a pro, and your code will be better for it.","David ""DB"" Baumgold",2018-04-19 00:59:20.423416,2018-04-19 00:59:20.423416,Oregon Ballroom 201–202,2017-05-08 17:10:00.000000,2017,0.0
51,"Magic Method, on the wall, who, now, is the `__fairest__` one of all?","Magic methods are a very powerful feature of Python and can open a whole new door for you. However, with great power comes great responsibility.  In this talk we explore magic method's capabilities by first designing new interfaces in a series of fun experiments. Secondly, we play with creating undeletable objects and learn about the mighty Garbage Collector in cPython and how a single magic method can overturn the fate of the object. Lastly, we create a lazy Redis client to illustrate a practical application of magic methods and learn about lazy loading.  Once you see what magic methods can bring to the table, the limit is only your imagination!",Sep Dehpour,2018-04-19 00:59:20.427844,2018-04-19 00:59:20.427844,Portland Ballroom 251 & 258,2017-05-08 13:55:00.000000,2017,1.0
52,Modern Python Dictionaries -- A confluence of a dozen great ideas,"Python's dictionaries are stunningly good.  Over the years, many great ideas have combined together to produce the modern implementation in Python 3.6.  This fun talk uses pictures and little bits of pure python code to explain all of the key ideas and how they evolved over time.  Includes newer features such as key-sharing, compaction, and versioning.",Raymond Hettinger,2018-04-19 00:59:20.432205,2018-04-19 00:59:20.432205,Portland Ballroom 251 & 258,2017-05-08 12:10:00.000000,2017,0.0
53,Next Level Testing,"Unit, functional, and integration tests are great first steps towards improving the quality of your python project.  Ever wonder if there’s even more you can do?  Maybe you've heard of property-based testing, fuzzing, and mutation testing but you're unsure exactly how they can help you.  In this talk we’ll cover additional types of tests that can help improve the quality and robustness of your python projects: property-based testing, fuzz testing, stress testing, long term reliability testing, and mutation testing.  We’ll also go beyond just covering what these tests are.  For each of the test types above, I’ll give you real world examples from open source software that I maintain that shows you the types of bugs each test type can find.  I’ll also show you how you can integrate these tests into your Travis CI and/or Jenkins environment.",James Saryerwinnie,2018-04-19 00:59:20.436865,2018-04-19 00:59:20.436865,Portland Ballroom 252–253,2017-05-08 12:10:00.000000,2017,1.0
54,No More Sad Pandas: Optimizing Pandas Code for Speed and Efficiency,"When I first began working with the Python Pandas library, I was told by an experienced Python engineer: ""Pandas is fine for prototyping a bit of calculations, but it's too slow for any time-sensitive applications."" Over multiple years of working with the Pandas library, I have realized that this was only true if not enough care is put into identifying proper ways to optimize the code's performance. This talk will review some of the most common beginner pitfalls that can cause otherwise perfectly good Pandas code to grind to a screeching halt, and walk through a set of tips and tricks to avoid them. Using a series of examples, we will review the process for identifying the elements of the code that may be causing a slowdown, and discuss a series of optimizations, ranging from good practices of input data storage and reading, to the best methods for avoiding inefficient iterations, to using the power of vectorization to optimize functions for Pandas dataframes.",Sofia Heisler,2018-04-19 00:59:20.440893,2018-04-19 00:59:20.440893,Oregon Ballroom 201–202,2017-05-08 16:30:00.000000,2017,1.0
55,One Data Pipeline to Rule Them All,"There are myriad data storage systems available for every use case imaginable, but letting application teams choose storage engines independently can lead to duplicated efforts and wheel reinvention. This talk will explore how to build a reusable data pipeline based on Kafka to support multiple applications, datasets, and use cases including archival, warehousing and analytics, stream and batch processing, and low-latency ""hot"" storage.",Sam Kitajima-Kimbrel,2018-04-19 00:59:20.446063,2018-04-19 00:59:20.446063,Oregon Ballroom 201–202,2017-05-08 13:50:00.000000,2017,0.0
56,Optimizations which made Python 3.6 faster than Python 3.5,"Various optimizations made Python 3.6 faster than Python 3.5. Let's see in detail what was done and how.  Python 3.6 is faster than any other Python version on many benchmarks. We will see results of the Python benchmark suite on Python 2.7, 3.5 and 3.6.  The bytecode format and instructions to call functions were redesign to run bytecode faster.  A new C calling convention, called ""fast call"", was introduced to avoid temporary tuple and dict. The way Python parses arguments was also optimized using a new internal cache.  Operations on bytes and encodes like UTF-8 were optimized a lot thanks to a new API to create bytes objects. The API allows very efficient optimizations and reduces memory reallocations.  Some parts of asyncio were rewritten in C to speedup code up to 25%. The PyMem_Malloc() function now also uses the fast pymalloc allocator also giving tiny speedup for free.  Finally, we will see optimization projects for Python 3.7: use fast calls in more cases, speed up method calls, a cache on opcodes, a cache on global variables.",Victor Stinner,2018-04-19 00:59:20.451239,2018-04-19 00:59:20.451239,Portland Ballroom 251 & 258,2017-05-08 10:50:00.000000,2017,1.0
57,Packaging Let’s Encrypt: Lessons learned shipping Python code to hundreds of thousands of users,"Let's Encrypt launhced on April 12th 2016, for the first time allowing anyone access to free SSL certificates that could be automatically fetched and renewed. The demand was massive, and so was the need for a client to fetch these certificates for all of those users. This client is called Certbot, and it's written entirely in Python. Unfortunately for the sanity of Certbot developers, these users of Let's Encrypt can't decide on a single operating system to use! This requires us to ship our software, and all of its dependencies, to a variety of systems all with different web servers, Python versions, package managers,and underlying packages. Learn how we got through this mess!",Noah Swartz,2018-04-19 00:59:20.455797,2018-04-19 00:59:20.455797,Portland Ballroom 251 & 258,2017-05-08 13:55:00.000000,2017,0.0
58,Passing Exceptions 101: Paradigms in Error Handling,"Exception handling in Python can sometimes feel like a Wild West. If you have a send_email function, and the caller inputs an invalid email address, should it: A) Return None or some other special return value, B) Let the underlying exception it might cause bubble up, C) Check via a regex and type checking and raise a ValueError immediately, or D) Make a custom EmailException subclass and raise that?   What if there is a network error while the email was sending? Or what if the function calls a helper _format_email that returns an integer (clearly wrong!), or raises an TypeError itself? Should it crash the program or prompt a retry?   This talk will introduce the concept of an exception, explain the built-in Python exception hierarchy and the utility of custom subclasses, demonstrate try/except/finally/else syntax, and then explore different design patterns for exception control flow and their tradeoffs using examples. It will also make comparisons to error handling philosophy in other languages, like Eiffel and Go.",Amandine Lee,2018-04-19 00:59:20.461389,2018-04-19 00:59:20.461389,Oregon Ballroom 201–202,2017-05-08 11:30:00.000000,2017,1.0
59,Piecing it Together: A beginner's guide to application configuration,"Assembling all the necessary setup for an application you’re building can often be more frustrating than writing the app itself. Learning to do this well is difficult, especially for those who are new to Python and might not know where to begin or what questions to ask. While there is no “right way” to set up a development environment or application, understanding the components involved and how they interact can empower you to customize your setup to best suit your needs. This talk will dive into what happens when setting up a database, the purpose and configuration of an isolated environment, how Python packages are installed, and finally, how each of these components interact with each other and the application itself; in particular, how an application's structure facilitates said interactions.",Mary Nagle,2018-04-19 00:59:20.468134,2018-04-19 00:59:20.468134,Portland Ballroom 254–255,2017-05-08 13:10:00.000000,2017,1.0
60,Prehistoric Patterns in Python,"Why do some code use dictionaries that have None for all values? Is it true that you shouldn't concatenate strings with +? Will Python optimize constant calculations?  This talk will go through some patterns that used to be common in Python, but which now are regarded as outdated and see if they really are outdated and why. The results surprised me, maybe they'll surprise you.",Lennart Regebro,2018-04-19 00:59:20.472255,2018-04-19 00:59:20.472255,Portland Ballroom 251 & 258,2017-05-08 11:30:00.000000,2017,0.0
61,Probabilistic Programming with PyMC3,"Bayesian statistics offers robust and flexible methods for data analysis that, because they are based on probability models, have the added benefit of being readily interpretable by non-statisticians. Until recently, however, the implementation of Bayesian models has been prohibitively complex for use by most analysts. But, the advent of probabilistic programming has served to abstract the complexity of Bayesian statistics, making such methods more broadly available. PyMC3 is a open-source Python module for probabilistic programming that implements several modern, computationally-intensive statistical algorithms for fitting Bayesian models, including Hamiltonian Monte Carlo (HMC) and variational inference. PyMC3’s intuitive syntax is helpful for new users, and the reliance on Theano for much of the computational work has allowed developers to keep the code base simple, making it easy to extend the software to meet analytic needs. PyMC3 itself extends Python's powerful ""scientific stack"" of development tools, which provide fast and efficient data structures, parallel processing, and interfaces for describing statistical models.  ",Christopher Fonnesbeck,2018-04-19 00:59:20.476233,2018-04-19 00:59:20.476233,Portland Ballroom 251 & 258,2017-05-08 13:10:00.000000,2017,1.0
62,Python for mathematical visualization: a four-dimensional case study,"This is a talk about creating pictures of a mathematical object---specifically, a 4-dimensional fractal ""dust"" that has been the subject of mathematical research in hyperbolic geometry since the 1980s.  In the end this is accomplished using a little algebra, a little geometry, and a healthy dose of Python.  That is, I will present a case study of using Python in several aspects of a mathematical visualization project, from the computation itself, to transforming and converting data, and finally for scripting the process of generating the images.  Along the way I'll explain how Python's convenient idioms and containers (e.g. sets and set comprehensions) are a good fit for some of the algebraic and geometric questions that come up, how Scipy and Numpy enable fast numerical calculations, and how Python's strength as a language for scripting and automation allows easy orchestration of rendering of still images and frames of animations.  The mathematical visualization project we describe is a collaboration with François Guéritaud (Université de Lille).",David Dumas,2018-04-19 00:59:20.480087,2018-04-19 00:59:20.480087,Portland Ballroom 252–253,2017-05-08 17:10:00.000000,2017,0.0
63,Python from Space: Analyzing Open Satellite Imagery Using the Python Ecosystem,"Earth imaging satellites, just like our computers, are shrinking and becoming more ubiquitous than ever before. It is now possible to obtain open satellite data on a daily if not weekly basis and for this data to be put to work; helping us better understand our planet and quickly respond to disaster situations.   In this talk we will work through a jupyter notebook that covers the satellite data ecosystem and the python tools that can be used to sift through and analyze that data. Topics include python tools for using Open Street Maps data, the Geospatial Data Abstraction Library (GDAL), and OpenCV and NumPy for image processing. This talk is intended for novice and intermediate python developers who are interested in using data science and satellite imagery for social good and fundamental scientific research.",Katherine Scott,2018-04-19 00:59:20.486401,2018-04-19 00:59:20.486401,Oregon Ballroom 201–202,2017-05-08 15:15:00.000000,2017,1.0
64,Python in The Serverless Era,"Serverless is the latest phase in the evolution of cloud development. Its building blocks are functions, a bunch of stateless “nano-services”, that can scale automatically and charged only when used. It enables teams to focus more on development while having fully managed servers. In this talk I'll cover the Serverless Architectures practices, use cases, tooling and the role python plays in it.",Benny Bauer,2018-04-19 00:59:20.491605,2018-04-19 00:59:20.491605,Portland Ballroom 254–255,2017-05-08 13:50:00.000000,2017,1.0
65,Rants and Ruminations From A Job Applicant After 💯 CS Job Interviews in Silicon Valley,"What is it like to interview at 1 technology company? Stressful and tiring. What is it like to interview at 100 technology companies? I have done that. In late August 2016, I quit an uninspiring full-time software job and talked to 100 employers in the San Francisco Bay Area to find the best fit. The hiring process reflects the company culture and its values. Listen to my rants and ruminations of interviewing at tiny seed-stage startups to large technology companies in Silicon Valley. Learn how to reform your own hiring process to be more considerate and thoughtful. Learn how to prepare for interviews efficiently.",Susan Tan,2018-04-19 00:59:20.495890,2018-04-19 00:59:20.495890,Portland Ballroom 254–255,2017-05-08 14:35:00.000000,2017,1.0
66,Readability Counts,"Have you found unreadable PEP8-compliant code and wondered how to fix it?  Have you ever seen code that was simply a pleasure to read?  If you've ever wondered what makes code easy to read, this talk is for you.  During this talk we'll learn a number of techniques for refactoring code to improve readability and maintainability.  We'll discuss:   whitespace self-documenting code modularity expectation management   We'll end with a checklist for improving the readability of your own code.",Trey Hunner,2018-04-19 00:59:20.499885,2018-04-19 00:59:20.499885,Oregon Ballroom 201–202,2017-05-08 11:30:00.000000,2017,0.0
67,Re-Programming the Human Genome with Python,"Modern genome editing techniques such as CRISPR-Cas9 are revolutionizing the way we discover and treat the root genetic causes of disease. Many of the most popular tools and libraries in this cutting edge application are written in Python. This talk will provide a general, software-centric introduction to the exciting new area of genome editing, describe the central string search, machine learning, and data management problems involved, and review how Python frameworks and libraries are used today to solve these problems in Production in order to benefit human health. This talk assumes no prior lab experience: only a proficiency with Python and curiosity!",Riley Doyle,2018-04-19 00:59:20.503987,2018-04-19 00:59:20.503987,Portland Ballroom 254–255,2017-05-08 16:30:00.000000,2017,1.0
68,Requests Under The Hood,"Requests is widely acknowledged as a library that saves users an enormous amount of time, effort, and pain through its intuitive and clear API. For this reason, most people who have never looked at the code assume that its code is as intuitive, well-structured, and clear as the API.  Of course, the truth is more complex than that. Real software that deals with real problems is rarely ideal: there are edge cases, terrible hacks, and awkward workarounds for problems.  Often in the software industry we pretend that these imperfections in our software don’t exist, or we try to hide them. These imperfections frequently cause people to reinvent wheels in order to simplify the code, which has benefits for understandability but frequently has downsides for resilience. When people talk about “battle-tested” code, they mean code that has been dirtied up over time from its original Platonic ideal implementation to something that is just as complex and warty as real life.  In this talk, one of the Requests and urllib3 core maintainers lays bare all of the worst and hackiest corners of the codebases of these two libraries. The goal is to help expose all of the invisible work done in mature codebases to tolerate edge cases and misbehaviour, as well as to try to remind us all that the perfect is the enemy of the good.",Cory Benfield,2018-04-19 00:59:20.508280,2018-04-19 00:59:20.508280,Oregon Ballroom 201–202,2017-05-08 10:50:00.000000,2017,0.0
69,Share Your Code! Python Packaging Without Complication,"If you want people to use your code you should package it! You may have heard that packaging is hard but the Python packaging ecosystem has evolved a lot over the years. Taking your beautiful code and sharing it with the world is complex but it doesn't have to be complicated. In this talk you will learn how to take advantage of modern tooling and practices so you can get boring stuff out of the way, publish quickly and frequently, and focus on your code.  This talk will cover:   A (brief) history of Python packaging Python Packaging User Guide recommendations Distribution formats Anatomy of a package Automating package creation Adding: Testing CI Documentation Testing package installation Releasing to PyPI   This talk is for you if you're new to Python packaging and would like to learn how to share you code or if you've worked with Python for a while and just aren't up-to-date with the latest packaging practices.",Dave Forgac,2018-04-19 00:59:20.513363,2018-04-19 00:59:20.513363,Oregon Ballroom 201–202,2017-05-08 13:10:00.000000,2017,1.0
70,Slot or not: higher performance custom objects in pure Python,"__slots__ are versatile for certain kinds of uses and users, if you know how they work.   At first glance, they seem like a free lunch, with improvements in both time and space. At second glance, they seem to have so many caveats to make them not worth using.   This talk is a deep dive into how __slots__ work, how to wring every benefit out, as well as the actual caveats and alternatives, with recommendations for writers of core libraries as well as end users.",Aaron Hall,2018-04-19 00:59:20.517701,2018-04-19 00:59:20.517701,Portland Ballroom 254–255,2017-05-08 16:30:00.000000,2017,1.0
71,Snakes on a Hyperplane: Python Machine Learning in Production,"Companies with an artificial-intelligence plan have a differentiating strategy in the intelligence economy; however, implementing robust machine-learning in production is nontrivial, often requiring a close collaboration between data scientists and developers, and retooling the production stack and workflows to develop and maintain accurate models.    Machine learning in production involves model application, handling missing data, data artifacts, and data outside of the training calibration.  A rigorous evaluation framework draws upon logging to determine characteristics of model coverage, model performance, auditing, and run-time performance.  Model coverage includes the number of times the model produced sensible output relative to number of times it is called.  Model coverage is reduced if the model does not converge or model criteria are not met.  Model performance is evaluated with a suite of metrics (accuracy, AUC, FPR, TPR, RMSE, MAPE, etc.), which assist in determining the most appropriate model to use in the production scenario and the validity of the model training.  Regularly performing manual audits for spot checks is important for debugging and ensuring the model passes sanity checks.  Model performance includes run times and profiling model pieces, ensuring performance is within specified requirements and refactoring otherwise.  In the AI renaissance, where ML is a critical piece of intelligent products, seamlessly integrating model evaluation into workflows is an important component of making robust products and building a satisfying customer experience.  Python is a great language to build intelligent products with its abundance of ML libraries and wrappers contributed as open-source software in addition to rich full-stack capabilities.",Jessica Lundin,2018-04-19 00:59:20.528117,2018-04-19 00:59:20.528117,Oregon Ballroom 203–204,2017-05-08 17:10:00.000000,2017,1.0
72,Snek in the Browser,"Python is a decades-strong language with a large community, and it has a solid foundation on the server, but it doesn't have a good user story in the browser... until now.  The BeeWare project aims to bring Python natively, everywhere. Using a combination of the Batavia and Toga projects, we can develop and entirely native web experience in Python, no JavaScript required.  During this talk, you will learn about how the BeeWare project has built Batavia, a Python virtual machine in JavaScript; and Toga, a multi-platform native API wrapper; a combination of which can be used to build an entire web platform in Python only.",Katie McLaughlin,2018-04-19 00:59:20.532288,2018-04-19 00:59:20.532288,Portland Ballroom 251 & 258,2017-05-08 14:35:00.000000,2017,1.0
73,Solid Snakes or: How to Take 5 Weeks of Vacation,"No matter whether you run a web app, search for gravitational waves, or maintain a backup script: being responsible for a piece of software or infrastructure means that you either get a pager right away, or that you get angry calls from people affected by outages.  Being paged at 4am in everyday life is bad enough.  Having to fix problems from hotel rooms while your travel buddies go for brunch is even worse.  And while incidents can’t be prevented completely, there are ways to make your systems more reliable and minimize the need for (your!) manual intervention.  This talk will help you to get calm nights and relaxing vacations by teaching you some of them.",Hynek Schlawack,2018-04-19 00:59:20.537777,2018-04-19 00:59:20.537777,Portland Ballroom 252–253,2017-05-08 13:40:00.000000,2017,0.0
74,Static Types for Python,"Over the past year and a half, Dropbox has been investing in the development of mypy, a static type checker for Python, as a way to make our multimillion-line Python codebase easier to understand, navigate, and maintain.  In this talk, we will discuss the benefits of type annotations, explain how to use them, and give a peak into how mypy works behind the scenes.  Mypy is an open-source type-checker for Python which supports the PEP 484 standard for gradual typing. Originally created by Jukka Lehtosalo as part of his PhD thesis in 2013, it is now under active development by a small team at Dropbox which includes David Fisher, Greg Price, and Guido van Rossum.  It supports Python 3.2 and higher, as well as Python 2.7 (via type comments).","Jukka Lehtosalo, David Fisher",2018-04-19 00:59:20.541801,2018-04-19 00:59:20.541801,Oregon Ballroom 201–202,2017-05-08 12:10:00.000000,2017,0.0
75,Temporal Data Structures with SQLAlchemy and Postgres,"SQLAlchemy (http://www.sqlalchemy.org) and Postgres (https://www.postgresql.org) provide several useful tools that allow us to build and query records through time: temporal models. Combining a need to have robust auditing, as well feature development on per-property history, we can turn “regulatory overhead” into an exciting technical challenge. At Clover Health we have built a small library to automate the task of decorating a model and making it “temporal.” This talk aims to demonstrate the underlying data model and interface for building this system.",Joseph Leingang,2018-04-19 00:59:20.546032,2018-04-19 00:59:20.546032,Oregon Ballroom 203–204,2017-05-08 11:30:00.000000,2017,0.0
76,Text is More Complicated Than You Think: Comparing and Sorting Unicode,"Few people realize just how complicated text can be. Did you know sorting and even case-folding can depend on a user's locale? That different strings of characters can be semantically completely equivalent? That there are over a thousand Latin letters?  Legacy text encodings like ASCII made a lot of simplifying assumptions about how written languages work, and we all put up with them because it was cool to even have computers in the first place. Unicode removes many of those assumptions and provides the tools we need to write software that can just do the right thing regardless of what text users throw at it. Even if you don't translate your UI, getting the details of string comparison, sorting, and searching right can eliminate annoying surprises for you and your users.",Morgan Wahl,2018-04-19 00:59:20.552204,2018-04-19 00:59:20.552204,Oregon Ballroom 203–204,2017-05-08 13:40:00.000000,2017,0.0
77,The Dictionary Even Mightier,"Since my “Mighty Dictionary” talk at PyCon 2010, the Python dictionary has evolved dramatically. Come learn about all of the the improvements, up to and including the re-architecture that has just landed with Python 3.6! The talk will discuss iterable views, the dictionary’s dedicated comprehension syntax, random key ordering, the special key-sharing dictionary designed to underlie object collections, and, most famously of all, the new “compact dictionary” that cuts dictionary storage substantially — and carries a fascinating side-effect.  Each new feature that the talk discusses will be motivated by considering the trade-offs inherent in hash table data structure design, and followed up with hints about how you can now use the dictionary even more effectively in your own code!",Brandon Rhodes,2018-04-19 00:59:20.558859,2018-04-19 00:59:20.558859,Oregon Ballroom 201–202,2017-05-08 15:15:00.000000,2017,0.0
78,The Fastest FizzBuzz in the West: Make Your Own Language with RPLY and RPython,"In this talk, you'll learn how I built DIVSPL (Dustin Ingram's Very Special Programming Language), a tongue-in-cheek domain-specific language, which is particularly good for implementing FizzBuzz -- as quickly as possible.  We'll build DIVSPL with RPLY, an implementation of David Beazley's PLY (but with a ""cooler"" API) and make it compatible with RPython, a restricted subset of the Python programming language. Along the way, you'll learn about lexers, parsers, and grammars, and in the end, you'll know how to build your own language.",Dustin Ingram,2018-04-19 00:59:20.563265,2018-04-19 00:59:20.563265,Portland Ballroom 254–255,2017-05-08 14:35:00.000000,2017,0.0
79,The Gilectomy: How's It Going?,"One of the most interesting projects in Python today is Larry Hastings' ""Gilectomy"" project: the removal of Python's Global Interpreter Lock, or ""GIL"".  Come for an up-to-the-minute status report: what's been tried, what has and hasn't worked, and what performance is like now.",Larry Hastings,2018-04-19 00:59:20.567293,2018-04-19 00:59:20.567293,Portland Ballroom 251 & 258,2017-05-08 12:10:00.000000,2017,0.0
80,The Glory of pdb's set_trace,"Everyone needs to debug code, and it can take up a non-trivial portion of our time to wait for code to complete execution and write print messages to stdout. There’s one function in particular in the python debugger (pdb) library that can give you a much clearer understanding of what’s going on in your code, much more quickly; pdb.set_ trace().  In this talk, we’ll identify the most useful things you can do when you use set trace, that can make debugging exponentially more efficient and enjoyable.",Nicole Zuckerman,2018-04-19 00:59:20.571265,2018-04-19 00:59:20.571265,Oregon Ballroom 201–202,2017-05-08 16:30:00.000000,2017,1.0
81,The Memory Chronicles: A Tale of Two Pythons,"MicroPython is the leanest, meanest full Python implementation. Designed for microcontrollers, this variant of Python runs in less than 300KB of memory, and retains support for all your favorite Python features.   So what does it take to make the smallest Python? Put differently, why does CPython have a large memory footprint?  This talk will explore the internals of MicroPython and contrast it with CPython, focusing on the aspects that relate to memory use. We will delve into the Python object models in each and the machinery for managing them. We will touch upon how the designs of the bytecode compiler and interpreter of each differ and why that matters.",Kavya Joshi,2018-04-19 00:59:20.575550,2018-04-19 00:59:20.575550,Portland Ballroom 251 & 258,2017-05-08 10:50:00.000000,2017,1.0
82,The Next Step: Finding Model Parameters With Random Walks,"The statistician John Tukey -- who designed the box plot and coined the term ""bit"" -- wrote:  ""An approximate answer to the right problem is worth a good deal more than an exact answer to an approximate problem"". Python has become one of the major languages for statistical data analysis, not least because of the expressiveness of the language itself and the availability of tools like Jupyter Notebooks, which enable iterative reasoning about a problem and its solutions.   This talks takes one step beyond an introduction to statistics with Python and aims to familiarize the audience with two concepts: a class of problems (so-called inverse problems), and a powerful statistical tool (the random walk, or more formally Markov-Chain Monte Carlo (MCMC) sampling with the Metropolis algorithm).   In inverse problems, model parameters are estimated from observational data. Both model and data are expected to be affected by error. The objective is not only to find parameters that best describe the observations, but also to figure out how good, or how possibly bad, a solution might be. Inverse problems are extremely common in many fields and crop up each time we attempt to reconstruct a reality from sensor, radar, scattering or imaging data.   The Metropololis-Hastings algorithm offers a solution via random sampling of a Bayesian posterior distribution. Even though listed as one of the 20th century's top 10 algorithms by the journal Computing in Science & Engineering, the Metropolis algorithm is easy to understand and implement, and a fun and instructive way to explore even complicated multi-variate probability distributions. ",Christine Waigl,2018-04-19 00:59:20.580650,2018-04-19 00:59:20.580650,Portland Ballroom 251 & 258,2017-05-08 13:50:00.000000,2017,1.0
83,The Python Visualization Landscape,"So you want to visualize some data in Python: which library do you choose? From Matplotlib to Seaborn to Bokeh to Plotly, Python has a range of mature tools to create beautiful visualizations, each with their own strengths and weaknesses. In this talk I’ll give an overview of the landscape of dataviz tools in Python, as well as some deeper dives into a few, so that you can intelligently choose which library to turn to for any given visualization task.",Jake VanderPlas,2018-04-19 00:59:20.585225,2018-04-19 00:59:20.585225,Portland Ballroom 252–253,2017-05-08 16:30:00.000000,2017,0.0
84,The trends in choosing licenses in Python ecosystem,"The software licenses are the permissions over copyrighted software. The permission and/ grant includes the grant to use, to redistribute, to prepare derivative works etc. These software licenses also set forth the limitations over these aforesaid rights. The software licenses basically marks the boundary for the usage of the code.  Therefore from the above mentioned introduction it very clear that it is very important for developers to choose the license for their code wisely and correctly.  PyPI, the Python Package Index is a repository of software for the Python programming language. There are currently 80000+ packages there.  This talk will go through the licenses of the top 2500 packages. We will see the trend of choosing a license for these top Python projects. We will discuss the licenses individually, compare them with each other. the advantages and disadvantages of the same.  We will further explain that why a license and/or licenses are being favored by the developers.",Anwesha Das,2018-04-19 00:59:20.590031,2018-04-19 00:59:20.590031,Portland Ballroom 254–255,2017-05-08 10:50:00.000000,2017,1.0
85,The Wild West of Data Wrangling,"Data science introductory courses might give you the impression that dealing with data is neat, tidy, and simple. They present you with a simplistic dataset and the scikit-learn or Pandas documentation, and a day or so later, you're done! Piece of cake, right?  The real world of data isn't that easy!   As a data scientist who has worked in the industry for several years, I have had a lot of experience dealing with messy, inaccurate, incomplete data, and I want to share those experiences with you. I'll talk my way through three real-world situations where I've had to analyze and build models on untidy and complex data, going through how I've preprocessed the data and prepared it for modeling. You'll leave with an understanding of how a data scientist thinks about data and what she does when the data is complicated.",Sarah Guido,2018-04-19 00:59:20.595133,2018-04-19 00:59:20.595133,Portland Ballroom 254–255,2017-05-08 17:10:00.000000,2017,0.0
86,Title Available On Request: An Introduction to Lazy Evaluation,"Lazy evaluation, also known as ""call by need"", is an evaluation strategy where values are produced only when needed. Lazy evaluation is the opposite of eager evaluation, Python's normal evaluation model, where functions are executed as seen and values are produced immediately.  In this talk we will define lazy evaluation and contrast it with eager evaluation. We will discuss tools that exist in Python for using lazy evaluation and show how we can build on the primitives to better represent computations. We will introduce common vocabulary for discussing evaluation models, and compare different systems for implementing lazy evaluation. Finally, we will discuss optimizations that can be made to optimize lazily evaluated expressions.",Joe Jevnik,2018-04-19 00:59:20.601530,2018-04-19 00:59:20.601530,Portland Ballroom 254–255,2017-05-08 10:50:00.000000,2017,0.0
87,"Tracing, Fast and Slow: Digging into and improving your web service’s performance","Do you maintain a Rube Goldberg-like service? Perhaps it’s highly distributed? Or you recently walked onto a team with an unfamiliar codebase? Have you noticed your service responds slower than molasses? This talk will walk you through how to pinpoint bottlenecks, approaches and tools to make improvements, and make you seem like the hero! All in a day’s work.  The talk will describe various types of tracing a web service, including black & white box tracing, tracing distributed systems, as well as various tools and external services available to measure performance. I’ll also present a few different rabbit holes to dive into when trying to improve your service’s performance.",Lynn Root,2018-04-19 00:59:20.605428,2018-04-19 00:59:20.605428,Oregon Ballroom 201–202,2017-05-08 17:10:00.000000,2017,0.0
88,Type uWSGI; press enter; what happens?,"You're a pretty knowledgeable Python web application developer, but how does that web application get served to the world? For many of us, uWSGI is the magic that makes our application available, and in this talk we'll look at how uWSGI works with the OS and the networking stack to make the magic happen.","Asheesh Laroia, Philip James",2018-04-19 00:59:20.609546,2018-04-19 00:59:20.609546,Oregon Ballroom 203–204,2017-05-08 11:30:00.000000,2017,0.0
89,Unicode: what is the big deal?,"Ever wondered why people complain that text processing is a hard problem? Or why Python 3 would introduce such a big backward incompatibility with switching to Unicode? Wonder no more, this talk is for you.  In 30 minutes I'm going to demonstrate real world text processing problems and how Python 3 helps solve them. The talk is going to explain how you should split your text from binary data in your application, what are sensible defaults and what are possible gotchas. All this sprinkled with a healthy dose of frustration by a guy whose first name starts with Ł.",Łukasz Langa,2018-04-19 00:59:20.614111,2018-04-19 00:59:20.614111,Portland Ballroom 254–255,2017-05-08 17:10:00.000000,2017,0.0
90,Web identity: OAuth2 and OpenIDConnect,"Interested in adding single sign-on to your application, but confused about the variety of different web authentication methods out there? OAuth, OAuth2, OpenID, OpenIDConnect, SAML, Facebook Connect? This talk will clarify the different protocols, examining OAuth2 and OpenIDConnect in greater detail. It will demonstrate a basic client implementation using FLOSS libraries, and briefly touch on some of the issues involved in server implementation.",Brendan McCollam,2018-04-19 00:59:20.622407,2018-04-19 00:59:20.622407,Oregon Ballroom 203–204,2017-05-08 12:10:00.000000,2017,0.0
91,What's in your pip toolbox?,"pip is a great tool, but dependency management doesn't stop there. I'll explore several tools that work with pip to make managing your dependencies easier, faster, and safer. I'll cover generating dependencies a better way, maintaining your requirements.txt for the long-term, and exploring existing Python environments. Afterward, you'll never want to pip freeze > requirements.txt again.",Jon Banafato,2018-04-19 00:59:20.627875,2018-04-19 00:59:20.627875,Oregon Ballroom 203–204,2017-05-08 15:15:00.000000,2017,0.0
92,What's new in Python 3.6,"Python 3.6 has turned out to be quite the release! With 16 Python Enhancement Proposals incorporated into the version, Python 3.6 is only surpassed by Python 3.0 for having more PEPs included in a single release. This talk will be an overview of those 16 PEPs and other changes outlined in the What's New document for Python 3.6.",Brett Cannon,2018-04-19 00:59:20.632458,2018-04-19 00:59:20.632458,Oregon Ballroom 203–204,2017-05-08 12:10:00.000000,2017,0.0
93,When the abyss gazes back: staring down Python's surprising internals,"Python's fantastic until it isn't.  This talk dives into some of the surprising implementation details of CPython, then explains exactly how they could be discovered from first principles.    Attendees will leave with some dangerous Python trivia, and the tools they'll need to uncovery their own trivia when surprises strike.  The talk takes a deep dive into a StackOverflow question asking why ""x"" in (""x"", ) is faster than ""x"" == ""x"" (http://stackoverflow.com/questions/28885132/why-is-x-in-x-faster-than-x-x/28885213#28885213), including a discussion of dis.disassemble, the Pyhton stack machine, and reading the CPython source. If time permits, there will be other fun examples, a whirlwind tour of debugging, and a couple of homework assignments.",David Wolever,2018-04-19 00:59:20.637127,2018-04-19 00:59:20.637127,Portland Ballroom 251 & 258,2017-05-08 11:30:00.000000,2017,1.0
94,Writing a C Python extension in 2017,"This talk describes the build of a C Python extension, with prebuilt binaries, in 2017, where modern packaging standards, as well as Docker, have been a game changer in the Python extensions world. Most examples come from our experience building PyMiniRacer, an embedded Python / JavaScript bridge used in production across hundreds of companies.  We will describe the different aspects of building a binary extension, including:   using the modern manylinux wheel type in order to ship a built binary, usable in most Linux distributions; the choices offered to developers when building an extension: the Python public C API, cffi, ...; testing of a binary module across various platforms; troubleshooting & debugging an extension: the basics you need to tackle most common issues.",Jean-Baptiste Aviat,2018-04-19 00:59:20.641199,2018-04-19 00:59:20.641199,Portland Ballroom 251 & 258,2017-05-08 16:30:00.000000,2017,0.0
95,"Yes, It's Time to Learn Regular Expressions","Regular expressions have a reputation as opaque and inscrutable. However, the basic concepts behind ""regex"" and text pattern recognition are simple to grasp. This talk is for any programmer who isn't familiar with Python's re module and its best practices. Stop putting it off, it's time to learn regular expressions!",Al Sweigart,2018-04-19 00:59:20.646942,2018-04-19 00:59:20.646942,Oregon Ballroom 203–204,2017-05-08 16:30:00.000000,2017,1.0
96,A Bit about Bytes: Understanding Python Bytecode,"At some point every Python programmer sees Python bytecode files -- they're those '.pyc' files Python likes to leave behind after it runs. But have you ever wondered what's really going on in those files? Well, wonder no more! In this talk you'll learn what Python bytecode is and how it's used to execute your code, as well as how to decipher and read it, and how to reason about bytecode to understand the performance of your Python code.",James Bennett,2018-04-19 00:59:20.652441,2018-04-19 00:59:20.652441,Grand Ballroom B,2018-03-28 17:10:00.000000,2018,1.0
97,Adapting from Spark to Dask: what to expect,"Until very recently, Apache Spark has been a de facto standard choice of a framework for batch data processing. For Python developers, diving into Spark is challenging, because it requires learning the Java infrastructure, memory management, configuration management. The multiple layers of indirection also make it harder to debug things, especially when throwing the Pyspark wrapper into the equation.  With Dask emerging as a pure Python framework for parallel computing, Python developers might be looking at it with new hope, wondering if it might work for them in place of Spark. In this talk, I’m using a data aggregation example to highlight the important differences between the two frameworks, and make it clear how involved the switch may be.  Note: Just in case it's unclear, there's no Java of any kind in this talk. All the code / examples use Python (PySpark).",Irina Truong,2018-04-19 00:59:20.657577,2018-04-19 00:59:20.657577,Grand Ballroom A,2018-03-29 14:35:00.000000,2018,1.0
98,All in the timing: How side channel attacks work,"In this talk, you’ll learn about a category of security issue known as side channel attacks. You’ll be amused to see how features like automatic data compression, short-circuit execution, and deterministic hashing can be abused to bypass security systems. No security background knowledge is required. The talk assumes at least intermediate Python experience.  We’ll take a tour of real side channel vulnerabilities in open source Python codebases, including the patches that fixed them. It also offers practical advice for avoiding these issues. My goal is to demystify this topic, even if you aren’t writing security-critical software.","Philip James, Asheesh Laroia",2018-04-19 00:59:20.662121,2018-04-19 00:59:20.662121,Grand Ballroom B,2018-03-29 17:10:00.000000,2018,1.0
99,Analyzing Data: What pandas and SQL Taught Me About Taking an Average,"“So tell me,” my manager said, “what is an average?”  There’s probably nothing worse than that sinking feeling when you finish an analysis, email it to your manager or client to review, and they point out a mistake so basic you can’t even fathom how you missed it.   This talk is about mine: how to take an average.  Averages are something we use everywhere - it’s a simple np.mean() in pandas or AVG() in SQL. But recently I’ve come to appreciate just how easy it is to calculate this statistic incorrectly. We learn once - in middle school no less - how to take an average, and never revisit it. Then, when we are faced with multidimensional datasets (ie. pretty much every dataset out there), we never reconsider whether we should be taking an average the same way.  In this talk, we follow my arduous and humbling journey of learning how to properly take an average with multidimensional data. We will cover how improperly calculating it can produce grossly incorrect figures, which can slip into publications, research analyses and management reports.",Alex Petralia,2018-04-19 00:59:20.667578,2018-04-19 00:59:20.667578,Global Center Ballroom AB,2018-03-29 15:15:00.000000,2018,1.0
100,A practical guide to Singular Value Decomposition in Python,"Recommender systems have become increasingly popular in recent years, and are used by some of the largest websites in the world to predict the likelihood of a user taking an action on an item. In the world of Netflix, this means recommending similar movies to the ones you have seen. In the world of dating, this means suggesting matches similar to people you already showed interest in!  My path to recommenders has been an unusual one: from a Software Engineer to working on matching algorithms at a dating company, with a little background on machine learning. With my knowledge of Python and the use of basic SVD (Singular Value Decomposition) frameworks, I was able to understand SVDs from a practical standpoint of what you can do with them, instead of focusing on the science.  In my talk, you will learn 2 practical ways of generating recommendations using SVDs: matrix factorization and item similarity. We will be learning the high-level components of SVD the ""doer way"": we will be implementing a simple movie recommendation engine with the help of Jupiter notebooks, the MovieLens database, and the Surprise recommendation package.",Daniel Pyrathon,2018-04-19 00:59:20.673779,2018-04-19 00:59:20.673779,Room 26A/B/C,2018-03-29 13:50:00.000000,2018,1.0
101,Augmenting Human Decision Making with Data Science,"Do we even need humans? Humans and data science are flawed on their own. Humans lack the ability to process large volumes of information. Machines lack intuition, empathy, and nuance. You'll learn how to guide users of expert-use systems by applying data science to their user experience. This allows us to take advantage of the human-touch while leveraging our large datasets. What is the relationship between human decisions and algorithms? Are we thinking about data science all wrong? In this talk, you'll learn the ways we balance human decisions and data science throughout our applications, the challenges we have faced along the way and the future of the relationship between humans and data.",Kelsey Pedersen,2018-04-19 00:59:20.677819,2018-04-19 00:59:20.677819,Grand Ballroom A,2018-03-29 11:30:00.000000,2018,1.0
102,Automating Code Quality,"Writing quality Python code can be both tough and tedious. On top of the general design, there are many code quality aspects that you need to watch out for when writing and reviewing code such as adherence to PEP8, docstring quality, test quality, etc. Furthermore, everyone is human. If you are catching these code quality issues by hand, there is a good chance that at some point you will miss an easy opportunity to improve code quality. If the quality check can be done by a machine, then why would you even try to catch the code quality issue by hand? In the end, the machine will be able to perform the quality check with much more speed, accuracy, and consistency than a person.  This talk will dive into how existing open source projects offload and automate many of these code quality checks resulting in:   A higher quality and a more consistent codebase Maintainers being able to focus more on the higher level design and interfaces of a project. An improved contribution process and higher quality pull requests from external contributors   By diving into how these open source projects automate code quality checks, you will learn about:   The available tooling related to checking code quality such as flake8, pylint, coverage, etc. How to automate code quality checks for both a development and team  setting. First-hand accounts of the benefits and lessons learned from automating code quality checks in real-life open source projects.",Kyle Knapp,2018-04-19 00:59:20.684396,2018-04-19 00:59:20.684396,Grand Ballroom A,2018-03-29 14:30:00.000000,2018,1.0
103,Bayesian Non-parametric Models for Data Science using PyMC3,"Nowadays, there are many ways of building data science models using Python, including statistical and machine learning methods. I will introduce probabilistic models, which use Bayesian statistical methods to quantify all aspects of uncertainty relevant to your problem, and provide inferences in simple, interpretable terms using probabilities.  A particularly flexible form of probabilistic models uses Bayesian non-parametric methods, which allow models to vary in complexity depending on how much data are available. In doing so, they avoid the over-fitting that is common in machine learning and statistical modeling. I will demonstrate the basics of Bayesian non-parametric modeling in Python, using the PyMC3 package. Specifically, I will introduce two common types, Gaussian processes and Dirichlet processes, and show how they can be applied easily to real-world problems using two examples.",Christopher Fonnesbeck,2018-04-19 00:59:20.691667,2018-04-19 00:59:20.691667,Global Center Ballroom AB,2018-03-29 13:40:00.000000,2018,1.0
104,Behavior-Driven Python,"Behavior-Driven Development (BDD) is gaining popularity as an improved way to collaborate over product features and tests. In Python, behave is one of the leading BDD test frameworks. Using behave, teams write Gherkin behavior scenarios (e.g., tests) in plain language, and then programmers write Python code to automate the steps. BDD testing is great because tests are self-documenting and steps abide by the DRY principle. An example test could be:     Given the DuckDuckGo home page is displayed   When the user searches the phrase ""Python""   Then search results for ""Python"" are shown   This talk will teach how to use behave to develop well-designed test scenarios and a robust automation framework. It will focus on the layers of the behave framework: feature files, step definitions, support classes, and config files. A full example project will be hosted on GitHub for audience members to reference after the talk.",Andrew Knight,2018-04-19 00:59:20.695767,2018-04-19 00:59:20.695767,Grand Ballroom A,2018-03-29 12:10:00.000000,2018,1.0
105,Beyond scraping: how to use machine learning when you're not sure where to start,"Scraping one web site for information is easy, scraping 10000 different sites is hard. Beyond page-specific scraping, how do you build a program than can extract the publication date of (almost) any news article online, no matter the web site?  We’ll cover when to use machine learning vs. humans or heuristics for data extraction, the different steps of how to phrase the problem in terms of machine learning, including feature selection on HTML documents, and issues that arise when turning research into production code.",Julie Lavoie,2018-04-19 00:59:20.699513,2018-04-19 00:59:20.699513,Grand Ballroom B,2018-03-29 14:35:00.000000,2018,1.0
106,Beyond Unit Tests: Taking Your Testing to the Next Level,"You've used pytest and you've used mypy, but bugs are still slipping through your code. What's next? In this talk, we cover two simple but powerful tools for keeping your code problem-free. Property-based testing, provided by the Hypothesis library, lets you run hundreds of tests from a single template. Contracts, via dpcontracts, make your program test itself. You'll learn how and why to use these tools and how to combine them with the rest of your testing suite.",Hillel Wayne,2018-04-19 00:59:20.703329,2018-04-19 00:59:20.703329,Room 26A/B/C,2018-03-29 12:10:00.000000,2018,1.0
107,Big-O: How Code Slows as Data Grows,"Big-O is a computer science technique for analyzing how code performs as data gets larger.  It's a very handy tool for the working programmer, but it's often shrouded in off-putting mathematics.  In this talk, I'll teach you what you need to know about Big-O, and how to use it to keep your programs running well.  Big-O helps you choose the data structures and algorithms that will let your code work efficiently even on large data sets.  You can understand Big-O even if you aren't a theoretical computer science math nerd. Big-O isn't as mystical as it appears. It's wrapped in mathematical trappings, but doesn't have to be more than a common-sense assessment of how your code will behave.",Ned Batchelder,2018-04-19 00:59:20.707202,2018-04-19 00:59:20.707202,Grand Ballroom C,2018-03-29 14:30:00.000000,2018,1.0
108,Birding with Python and Machine Learning,"In the past few years, the power of computer vision has exploded. In this talk, we'll apply a deep learning model to a bird feeder. We'll use that model to detect, identify, and record birds that come to a smart bird feeder.  Along the way, we'll learn about different platforms to deploy deep learning cameras on, from the lowly Raspberry PI all the way up to the powerful NVIDIA Jetson embedded computer with a built in GPU.",Kirk Kaiser,2018-04-19 00:59:20.711891,2018-04-19 00:59:20.711891,Grand Ballroom C,2018-03-29 14:35:00.000000,2018,1.0
109,Bowerbirds of Technology: Architecture and Teams at Less-than-Google Scale,"Facebook, Google, Uber, LinkedIn, and friends are the rarefied heights of software engineering. They encounter and solve problems at scales shared by few others, and as a result, their priorities in production engineering and architecture are just a bit different from the rest of us down here in the other 99% of services. Through deconstructing a few blog posts from these giants, we’ll evaluate just what is it that they’re thinking about when they build systems and whether any of their choices are relevant to those of us operating at high scale yet still something less than millions of requests per second.  This talk will go into depth on how to make technological decisions to meet your customers’ requirements without requiring a small army of engineers to answer 2 AM pages, and how to set realistic goals for your team around operations, uptime, communications, and disaster recovery.  With these guidelines in mind, you should be better equipped to say no (or yes!) the next time your team’s software hipster proposes moving everything to the Next Big Thing.",Sam Kitajima-Kimbrel,2018-04-19 00:59:20.716696,2018-04-19 00:59:20.716696,Global Center Ballroom AB,2018-03-29 17:10:00.000000,2018,1.0
110,Building a cross-platform native app with BeeWare,"Have you ever wanted to write a GUI application you can run on your laptop? What about an app that you can run on your phone? Historically, these have been difficult to achieve with Python, and impossible to achieve without learning a different API for each platform. But no more.  BeeWare is a collection of tools and libraries that allows you to build cross-platform native GUI applications in pure Python, targeting desktop, mobile and web platforms. In this talk, you'll be introduced to the BeeWare suite of tools and libraries, and see how you can use them to develop, from scratch, a GUI ChatBot application that can be deployed as a standalone desktop application, a mobile phone application, and a single page webapp - without making any changes to the application's codebase.",Russell Keith-Magee,2018-04-19 00:59:20.721274,2018-04-19 00:59:20.721274,Grand Ballroom C,2018-03-29 14:35:00.000000,2018,1.0
111,Building a Data Pipeline with Testing in Mind,"It’s one thing to build a robust data pipeline process in python but a whole other challenge to find tooling and build out the framework that allows for testing a data process. In order to truly iterate and develop a codebase, one has to be able to confidently test during the development process and monitor the production system.   In this talk, I hope to address the key components for building out end to end testing for data pipelines by borrowing concepts from how we test python web services. Just like how we want to check for healthy status codes from our API responses, we want to be able to check that a pipeline is working as expected given the correct inputs. We’ll talk about key features that allows a data pipeline to be easily testable and how to identify timeseries metrics that can be used to monitor the health of a data pipeline.",Jiaqi Liu,2018-04-19 00:59:20.725724,2018-04-19 00:59:20.725724,Room 26A/B/C,2018-03-29 16:30:00.000000,2018,1.0
112,Build Teams as an Engineer,"We build product and software as teams. And as anyone who as worked on a team knows, there’s often a lot more that goes into working together to build that product than actually just building the product itself. A highly functional team is not as elusive it may seem. Software engineering is a skill we’ve developed, but even more importantly software engineering on teams is another skill we’ve been practicing and improving on as an industry. Software engineering principles and best practices may seem to have very little to do with teamwork, but being able to thoughtfully apply some of what we’ve learned as engineers towards teamwork, we can help move towards creating such success with our teams.",Joyce Jang,2018-04-19 00:59:20.731633,2018-04-19 00:59:20.731633,Grand Ballroom C,2018-03-29 10:50:00.000000,2018,1.0
113,By the Numbers: Python Community Trends in 2017/2018,"Want to know about the latest trends in the Python community and see the the big picture of how things have changed over the last few years? Interested in the results of the latest official Python Developers Survey 2017 which was supported by the Python Software Foundation and gathered responses from more than 10.000 Python developers? Come learn about the most popular types of Python development, trending frameworks, libraries and tools, additional languages being used by Python developers, Python versions usage statistics and many other insights from the world of Python. All derived from the actual data and professional research such as the Python Developers Survey 2017 which collected responses from over 10.000 Python developers, organized in partnership between the Python Software Foundation and JetBrains, the Python Developers Survey 2016, 3rd party surveys and supplementary analytical research.","Dmitry Filippov, Ewa Jodlowska",2018-04-19 00:59:20.738717,2018-04-19 00:59:20.738717,Room 26A/B/C,2018-03-29 13:55:00.000000,2018,1.0
114,Clearer Code at Scale: Static Types at Zulip and Dropbox,"Python now offers static types! Companies like Dropbox and Facebook, and open-source projects like Zulip, use static types (with PEP 484 and mypy) to make Python more productive and fun to work with — in existing codebases from 40k lines to 4 million, in Python 2 and 3, and while preserving the conciseness and flexibility that make Python a great language in the first place. I’ll describe how.  Reading and understanding code is a huge part of what we do as software developers. If we make it easier to understand our codebases, we make everyone more productive, help each other write fewer bugs, and lower barriers for new contributors. That's why Python now features optional static types, and why Dropbox, Facebook, and Zulip use them on part or all of their Python code.  In this talk, I’ll share lessons from Zulip’s and Dropbox’s experience — having led the mypy team at Dropbox and working now on the Zulip core team — for how you can start using static types in your own codebases, large or small. We’ll discuss how to make it a seamless part of your project’s tooling; what order to approach things in; and powerful new tools that make it even easier today to add static types to your Python codebase than ever before.",Greg Price,2018-04-19 00:59:20.744340,2018-04-19 00:59:20.744340,Grand Ballroom B,2018-03-29 13:50:00.000000,2018,1.0
115,"Code like an accountant: Designing data systems for accuracy, resilience and auditability","As engineers, we care a lot about the reliability of our applications. When a website falls over, pagers go off, and engineers burst into action to bring a site back to life.  Postmortems are written, and teams develop strategies to prevent similar failures in the future.  But what about the reliability of our data? Would you trust financial reports built on your data?   If not, what can you do to improve data health? If you would trust these reports, how can you prove to customers, investors, and auditors alike that they should too?  In this talk, you’ll learn to apply strategies from the world of dev-ops to data. You’ll learn about questions auditors ask that can help you pinpoint data problems. You’ll also learn some accounting-specific tools for accurate and timely record keeping that I’ve found fascinating and helpful!",Sophie Rapoport,2018-04-19 00:59:20.748923,2018-04-19 00:59:20.748923,Global Center Ballroom AB,2018-03-29 11:30:00.000000,2018,1.0
116,Code Reviews Using Art Critique Principles,"Code reviews don't have to be a time consuming, morale zapping, arduous tasks. Not only can they catch bugs and errors but they can contribute in positive ways to the individual developer, the team, management and company as a whole.    Art critiques have existed in academia for hundreds of years. The methodology of the critique has evolved to be time sensitive and productive, while keeping the enthusiasm of the student artist intact.    The purpose of the art critique is to get peers and mentors to look at the work and raise any problems they may see. It's also time where people with more experience could contribute their knowledge in a helpful way. This process is about producing the best work, quickly and in a productive and constructive way.   These methods can be applied to code review.",Stacy Morse,2018-04-19 00:59:20.752779,2018-04-19 00:59:20.752779,Grand Ballroom A,2018-03-29 10:50:00.000000,2018,1.0
117,Coding through Adversity,"In 2017, I was released from prison after serving 17 years. One of the most transformational experiences I had while incarcerated was learning to code, through a pioneering new program called Code.7370 — the first coding curriculum in a United States prison.  In this talk, I’d like to share my experiences learning to code in prison and getting a software engineering job after my release, with the goals of:  Inspiring new programmers to stick with it and be confident in their abilities  Inspiring educators to think about how to support new coders in a broad range of learning environments (there’s no internet in prison!)  Inspiring everyone to think about the potential for rehabilitation in prison in a new way",Chris Schuhmacher,2018-04-19 00:59:20.756761,2018-04-19 00:59:20.756761,Grand Ballroom B,2018-03-29 10:50:00.000000,2018,1.0
118,Colossal Cave Adventure in Python... in the browser!,"Colossal Cave, also known as Adventure or ADVENT, is the original text adventure. It was written in FORTRAN IV and there is practically no way to run the original program without translating it. We'll explore software archeology to write a Python interpreter to run the FORTRAN code as-is, without translating it. Come learn about pre-ASCII and 36-bit integers and writing interpreters in Python!  And, we'll show how to use BeeWare's Batavia Python interpreter (in JavaScript) to execute the program. FORTRAN IV in Python in JavaScript in your browser!",Christopher Swenson,2018-04-19 00:59:20.760812,2018-04-19 00:59:20.760812,Grand Ballroom B,2018-03-29 12:10:00.000000,2018,1.0
119,Controlling apples with snakes: Automating mobile apps with Appium,"Testing mobile applications is hard. Testing manually is nearly impossible. That’s where automated testing shines. Just sit back and watch the machine go! Python is a very powerful language for writing automated tests, but since Python is not installed on mobile platforms, we need to find a way to remotely control and monitor the device. But how do we automate a device remotely? The answer is Appium.  In this talk I will go over the process of deploying and testing iOS (or Android) applications, and how to work with Appium to easily generate Python 3 code for testing your application.",Nir Arad,2018-04-19 00:59:20.764901,2018-04-19 00:59:20.764901,Grand Ballroom A,2018-03-29 15:15:00.000000,2018,1.0
120,"Counter, Gauge, Upper 90 - Oh my!","Setting up application monitoring is often an afterthought, and in the speaker's opinion can be a bit overwhelming to get started with. What is a metric? What is a gauge? What is a counter? What's that upper 90 metric you have up on your dashboard? And what all metrics should I monitor?  This talk aims to get you started on the monitoring journey in Python. In addition to clearing up some of the jargon, we will look at statsd and prometheus monitoring systems and how to integrate our applications with these.  Without the numbers, we are really flying blind!",Amit Saha,2018-04-19 00:59:20.769303,2018-04-19 00:59:20.769303,Grand Ballroom B,2018-03-29 11:30:00.000000,2018,1.0
121,CuPy: A NumPy-compatible Library for GPU,"Website | Docs | Install Guide | Tutorial | Examples (Official) | Forum  CuPy is an open-source library with NumPy syntax that increases speed by doing matrix operations on NVIDIA GPUs. It is accelerated with the CUDA platform from NVIDIA and also uses CUDA-related libraries, including cuBLAS, cuDNN, cuRAND, cuSOLVER, cuSPARSE, and NCCL, to make full use of the GPU architecture. CuPy's interface is highly compatible with NumPy; in most cases it can be used as a drop-in replacement. CuPy supports various methods, data types, indexing, broadcasting, and more.",Shohei Hido,2018-04-19 00:59:20.773842,2018-04-19 00:59:20.773842,Global Center Ballroom AB,2018-03-29 14:35:00.000000,2018,1.0
128,DragonPaint – Bootstrapping Small Data to Color Cartoons,"The creation of sufficient quantities of labeled training data is one of the biggest challenges for machine learning applications, especially when the data itself must be created, not just labeled. DragonPaint presents a generalizable strategy for minimizing the manual creation of data using rule based algorithms to automate the creation of a restricted subset of data and then bootstrapping to the automated creation of unrestricted (rule breaking) training and test data. A gentle introduction to computer vision, graphics and machine learning, we use Python and geometry to build an image data set for a TensorFlow model.",Gretchen Greene,2018-04-19 00:59:20.812524,2018-04-19 00:59:20.812524,Grand Ballroom B,2018-03-29 11:30:00.000000,2018,1.0
122,Dataclasses:  The code generator to end all code generators,"The PEP 557 dataclasses module is available in starting in Python 3.7.   It will become an essential part of every Python programmer's toolkit.  This talk shows what problem the module solves, explains its key design decisions, and provides practical examples of how to put it to work.  Dataclasses are shown to be the next step in a progression of data aggregation tools: tuple, dict, simple class, bunch recipe, named tuples, records, attrs, and then dataclasses. Each builds upon the one that came before, adding expressiveness at the expense of complexity.  Dataclasses are unique in that they let you selectively turn-on or turn-off its various capabilities and it lets the user choose the underlying data store (either instance dictionary, instance slots, or an inherited base class).  Dataclasses and typing.NamedTuple both use variable annotations which were new in Python 3.6.",Raymond Hettinger,2018-04-19 00:59:20.779758,2018-04-19 00:59:20.779758,Grand Ballroom C,2018-03-29 15:15:00.000000,2018,1.0
123,Data Visualization in Mixed Reality with Python,"Data Visualization charts are supposed to be our map to information. However, when making charts, customarily we are just re-sizing lines and circles based on metrics instead of creating data-driven version of reality.  The contemporary charting techniques have a few shortcomings (especially when dealing with high-dimensional dataset):    Context Reduction: in order to fit a high-dimensional dataset into a chart one needs to filter/ aggregate/ flatten data which results in reduction of full context of information.  Without context most of the charts show only a part of the story, that can potentially lead to data misinterpretation/misunderstanding.  Numeric Thinking: naturally humans have hard time perceiving big numbers. While data visualization is suppose to help us to conceptualize large volumes,  unless the dataset is carefully prepared, 2D charts rarely give us the intuitive grasp of magnitude.  Perceptual de-humanization: when examining charts it is easy to forget that we are dealing with activity in real world instead of lines/bars.    Augmented/Mixed Reality can potentially solve all of the issues listed above by presenting an intuitive and interactive environment for data exploration. Three dimensional space provides conditions to create complex data stories with more “realistic assets” (beyond lines and bars). The talk would present the architecture required to create MR data visualization story with Python (70% of architecture), starting with drawing 3D assets in a data-driven way and finishing with deployment on MR devices.",Anna Nicanorova,2018-04-19 00:59:20.784786,2018-04-19 00:59:20.784786,Grand Ballroom B,2018-03-29 10:50:00.000000,2018,1.0
124,Debugging PySpark -- Or trying to make sense of a JVM stack trace when you were minding your own bus,"Apache Spark is one of the most popular big data projects, offering greatly improved performance over traditional MapReduce models. Much of Apache Spark’s power comes from lazy evaluation along with intelligent pipelining, which can make debugging more challenging. This talk will examine how to debug Apache Spark applications, the different options for logging in PySpark, as well as some common errors and how to detect them.  Spark’s own internal logging can often be quite verbose, and this talk will examine how to effectively search logs from Apache Spark to spot common problems. In addition to the internal logging, this talk will look at options for logging from within our program itself.  Spark’s accumulators have gotten a bad rap because of how they interact in the event of cache misses or partial recomputes, but this talk will look at how to effectively use Spark’s current accumulators for debugging as well as a look to future for data property type accumulators which may be coming to Spark in future version.  In addition to reading logs, and instrumenting our program with accumulators, Spark’s UI can be of great help for quickly detecting certain types of problems.  Debuggers are a wonderful tool, however when you have 100 computers the “wonder” can be a bit more like “pain”. This talk will look at how to connect remote debuggers, but also remind you that it’s probably not the easiest path forward.",Holden Karau,2018-04-19 00:59:20.789601,2018-04-19 00:59:20.789601,Grand Ballroom A,2018-03-29 15:15:00.000000,2018,1.0
125,Democratizing Distributed Computing with Dask and JupyterHub,"We use JupyterHub, XArray, Dask, and Kubernetes to build a cloud-based system to enable scientists to analyze and manage large datasets.  We use this in practice to serve a broad community of atmospheric and climate scientists.  Atmospheric and climate scientists analyze large volumes of observational and simulated data to better understand our planet.  They have historically used tools like NumPy and SciPy along with Jupyter notebooks to combine efficient computation with accessibility.  However, as datasets increase in size and collaboration extends to new populations of scientists these tools begin to feel their age.  In this talk we use more recent libraries to build a modern deployment for academic scientists.  In particular we use the following tools:   Dask: to parallelize and scale NumPy computations XArray: as a self-discribing data model and tool kit for labeled and index arrays JupyterLab: to enable more APIs for users beyond the classic notebook JupyterHub: to manage users and maintain environments for a new population of cloud-friendly users Kubernetes: to manage everything and deploy easily on cloud hardware   This talk will focus less on how these libraries work and will instead be a case study of using them together in an operational setting.  During the talk we will build up and deploy a running system that the audience can then use to access distributed computing resources.",Matthew Rocklin,2018-04-19 00:59:20.796209,2018-04-19 00:59:20.796209,Room 26A/B/C,2018-03-29 10:50:00.000000,2018,1.0
126,Demystifying the Patch Function,"One of the most challenging and important thing fors for Python developers learn is the unittest mock library. The patch function is in particular confusing- there are many different ways to use it. Should I use a context manager? Decorator? When would I use it manually? Improperly used patch functions can make unit tests useless, all the while making them look as if they are correctly testing code.Let’s learn how to wield patch with confidence!",Lisa Roach,2018-04-19 00:59:20.802335,2018-04-19 00:59:20.802335,Grand Ballroom B,2018-03-29 12:10:00.000000,2018,1.0
127,Don't Look Back in Anger: Wildman Whitehouse and the Great Failure of 1858,"In the 1850s, Edward Orange Wildman Whitehouse was appointed the lead engineer of the first attempt to build a trans-Atlantic telegraph cable. With the entire population of two continents waiting for his go-live, their handlebar moustaches aquiver, he demonstrated in fine form just how spectacularly a big project can be a bigger disaster.  This is a tale of long-winded rants, spectacular sideburns, and gentlemen scientists behaving badly. It is also a lesson about the importance of honest reflection in technical teamwork. Lilly outlines some of the mistakes made during one of the biggest tech delivery projects in history, and how a constructive view of failure helped to turn it all around. Through the public meltdowns of Wildman Whitehouse you will learn the importance of feedback, how to handle complex tasks gracefully, and the best way to recover from having your pipeline eaten by a whale.",Lilly Ryan,2018-04-19 00:59:20.808768,2018-04-19 00:59:20.808768,Grand Ballroom C,2018-03-29 13:55:00.000000,2018,1.0
129,Easy 2D Game Creation With Arcade,"Want to have fun with Python? Do something visual? Get started today? Learn how to draw, animate, and use sprites for games with the Python Arcade library.  ""Arcade"" is an easy-to-use Python library for creating 2D arcade games. We'll show you how to get started creating your own game, and find plenty of example code to get an idea of what you can do with this library. If you are familiar with PyGame, Arcade is easier, more powerful, and uses recent Python features like type hinting and decorators.  This talk is great for beginners, educators, and people who want to create their own arcade games.",Paul Vincent Craven,2018-04-19 00:59:20.816628,2018-04-19 00:59:20.816628,Room 26A/B/C,2018-03-29 14:35:00.000000,2018,1.0
130,Efficient shared memory data structures,"Multithreading makes shared memory easy, but true parallelism next to impossible. Multiprocessing gives us true parallelism, but it makes sharing memory very difficult, and high overhead. In this talk, we'll explore techniques to share memory between processes efficiently, with a focus on sharing read-only massive data structures.",Claudio Freire,2018-04-19 00:59:20.820757,2018-04-19 00:59:20.820757,Grand Ballroom B,2018-03-29 13:10:00.000000,2018,1.0
131,Effortless Logging: A deep dive into the logging module,"Logs are our best friend, especially on those late nights when we try to troubleshoot a problem in production that was written by a co-worker who is on vacation. Logs are the main way to know what is happening with an application at runtime, but we don’t realize how important they are until we actually need them. Unfortunately, they are usually an under-estimated part of the development process.  This talk aims to transmit the need for the logging module, briefly explains how to use it and how it is built, and dives into all the complexity that is hidden to us. This will help attendees not just understand all the magic that allows us to inspect our applications at runtime, but also to avoid mistakes and adapt the module to our needs for more esoteric scenarios.  The talk is structured to simplify the understanding of the logging module. Many people have read the documentation, but still struggle to fully understand what is happening under the hood. This talk aims to eliminate that barrier by presenting it in an easier-to-digest manner.",Mario Corchero,2018-04-19 00:59:20.824545,2018-04-19 00:59:20.824545,Room 26A/B/C,2018-03-29 13:10:00.000000,2018,1.0
132,Elegant Solutions For Everyday Python Problems,"Are you an intermediate python developer looking to level up? Luckily, python provides us with a unique set of tools to make our code more elegant and readable by providing language features that make your code more intuitive and cut down on repetition. In this talk, I’ll share practical pythonic solutions for supercharging your code.   Specifically, I'll cover:   What magic methods are, and show you how to use them in your own code. When and how to use partial methods. An explanation of ContextManagers and Decorators, as well as multiple techniques for implementing them. How to effectively use NamedTuples, and even subclass and extend them!   Lastly, I'll go over some example code that ties many of these techniques together in a cohesive way. You'll leave this talk feeling confident about using these tools and techniques in your next python project!",Nina Zakharenko,2018-04-19 00:59:20.828630,2018-04-19 00:59:20.828630,Room 26A/B/C,2018-03-29 17:10:00.000000,2018,1.0
133,Exploring Deep Learning Framework PyTorch,"Anyone who is interested in deep learning has gotten their hands dirty playing around with Tensorflow, Google's open source deep learning framework. Tensorflow has its benefits like wide scale adoption, deployment on mobile, and support for distributed computing, but it also has a somewhat challenging learning curve, is difficult to debug, and hard to deploy in production. PyTorch is a new deep learning framework that solves a lot of those problems.  PyTorch is only in beta, but users are rapidly adopting this modular deep learning framework. PyTorch supports tensor computation and dynamic computation graphs that allow you to change how the network behaves on the fly unlike static graphs that are used in frameworks such as Tensorflow. PyTorch offers modularity which enhances the ability to debug or see within the network and for many, is more intuitive to learn than Tensorflow.  This talk will objectively look at PyTorch and why it might be the best fit for your deep learning use case and we'll look at use cases that will showcase why you might want consider using Tensorflow instead.",Stephanie Kim,2018-04-19 00:59:20.832658,2018-04-19 00:59:20.832658,Grand Ballroom A,2018-03-29 16:15:00.000000,2018,1.0
134,Fighting Gerrymandering with PyMC3,"At the end of 2017, there were seven states with ongoing redistricting litigation.  We will discuss a statistical model that the United States Supreme Court declared to be appropriate in cases of racial gerrymandering, and show how it can be implemented and used with the library PyMC3.  We will also discuss what the model tells us about racial gerrymandering in North Carolina.","Colin Carroll, Karin C. Knudson",2018-04-19 00:59:20.836416,2018-04-19 00:59:20.836416,Grand Ballroom B,2018-03-29 13:55:00.000000,2018,1.0
135,Fighting the Good Fight: Python 3 in your organization,"Today, services built on Python 3.6.3 are widely used at Facebook. But as recently as May of 2014 it was actually impossible at all to use Python 3 at Facebook. Come learn how we cut the Gordian Knot of dependencies and social aversion to the point where new services are now being written in Python 3 while older Python 2 projects are actively migrated to Python 3. All accomplished by a small group of individual contributors in their spare time. Learn to fight the good fight and upgrade your organization to Python 3 like we did at Facebook.",Jason Fried,2018-04-19 00:59:20.840462,2018-04-19 00:59:20.840462,Grand Ballroom B,2018-03-29 16:30:00.000000,2018,1.0
136,Flourishing FLOSS: Making Your Project Successful,"You maintain an Open Source project with great code? Yet your project isn’t succeeding in the ways you want? Maybe you’re struggling with funding or documentation? Or you just can’t find new contributors and you’re drowning in issues and pull requests? Open Source is made up of many components and we are often better-trained in methods for writing good code, than in methods for succeeding in the other dimensions we want our project to grow.  In this talk we’ll explore the different components of an Open Source project and how they work together. After this talk you’ll be well-equipped with a ideas and strategies for growing, cultivating, and nourishing your Open Source project.   For your project to succeed, all of its non-code components must be well-maintained. What are these different components and what methods can we learn to maintain them?   Build real relationships with your sponsors and determine ways how both sides can benefit from this relationship, don’t just ask people for money.  Establish a good communication system with your contributors: Keep them informed, listen to their feedback and input, make them feel heard.  Thank the people who worked on ticket triage or marketing, not just those who wrote code, in your release notes.  Make it easy for new contributors to get started: Write and maintain good documentation, answer questions in a friendly and timely manner.  Market and evangelize in the right places and at the right time: Give conference talks, organize sprints, keep your project’s Twitter account active, always curate new and interesting content on your blog or website. Implement a Code of Conduct and enforce it if needed: Make your project a safe space to contribute for everyone.    With these methods and a half-dozen others, you’ll handle beautifully all the components your project needs to succeed.",Anna Ossowski,2018-04-19 00:59:20.847151,2018-04-19 00:59:20.847151,Grand Ballroom B,2018-03-29 13:55:00.000000,2018,1.0
137,"Get your resources faster, with importlib.resources","Resources are files that live within Python packages.  Think test data files, certificates, templates, translation catalogs, and other static files you want to access from Python code.  Sometimes you put these static files in a package directory within your source tree, and then locate them by importing the package and using its __file__ attribute.  But this doesn't work for zip files!  You could use pkg_resources, an API that comes with setuptools and hides the differences between files on the file system and files in a zip file.  This is great because you don't have to use __file__, but it's not so great because pkg_resources is a big library and can have potentially severe performance problems, even at import time.  Welcome to importlib.resources, a new module and API in Python 3.7 that is also available as a standalone library for older versions of Python.  importlib.resources is build on top of Python's existing import system, so it is very efficient.  It also defines an abstract base class which loaders can implement to provide their own resource access.  Python's built-in zipimporter uses this to provide efficient access to resources within a zip file.  Third party import hooks can do the same, so resources can come from anything that is importable by Python.  This talk will step through the motivations behind importlib.resources, the library's usage, its interfaces, and the hooks made available to third party packages.  It will also talk about the minor differences between the standalone version and the version in Python 3.7's standard library.  Hopefully audience members will come away with compelling reasons to port their code to this much more efficient library.",Barry Warsaw,2018-04-19 00:59:20.851729,2018-04-19 00:59:20.851729,Grand Ballroom C,2018-03-29 17:10:00.000000,2018,1.0
138,Graph Databases: Talking about your Data Relationships with Python,"Have you ever considered how many relationships you have in your virtual life? Every friend or page liked on Facebook, each connection in LinkedIn or Twitter account followed is a new relationship not only between two people, but also between their data. In Brazil only, we have 160 millions Facebook users. How can we represent and manipulate all these relationships? Graph Databases are storage systems that use graph structure (nodes and edges) to represent and store data in a semantic way.  This talk will begin approaching the challenge in representing relationships in Relational Databases and introducing a more friendly solution using graph. The definition of Graph Database, its pros and cons and some available tools (Neo4J, OrientDB and TitanDB) will be shown during the presentation, as well as how these tools can be integrated with Python.",Nicolle Cysneiros,2018-04-19 00:59:20.856505,2018-04-19 00:59:20.856505,Grand Ballroom A,2018-03-29 13:40:00.000000,2018,1.0
139,How Netflix does failovers in 7 minutes flat,"During peak hours, Netflix video streams make up more than one third of internet traffic. Netflix must stream uninterrupted in the face of widespread network issues, bad code deploys, AWS service outages, and much more. Failovers make this possible.  Failover is the process of transferring all of our traffic from one region in AWS to another. While most of Netflix runs on Java, failovers are powered entirely by Python. Python's versatility and rich ecosystem means we can use it for everything from predicting our traffic patterns to orchestrating traffic movement, while dealing with the eventual consistency of AWS.  Today, we can shift all of our 100 million+ users in under seven minutes. A lot of engineering work went into making this possible. The issues we faced and solutions we created have broad application to availability strategies in the cloud or the datacenter.",Amjith Ramanujam,2018-04-19 00:59:20.860729,2018-04-19 00:59:20.860729,Global Center Ballroom AB,2018-03-29 11:30:00.000000,2018,1.0
140,HOWTO Write a Function,A function is a small chunk of code that does useful work. Your job when writing a function is to do it in a way that it easy to read. Based on over 15 years of code reviews here are some tips and guidelines I give again and again.,Jack Diederich,2018-04-19 00:59:20.869047,2018-04-19 00:59:20.869047,Room 26A/B/C,2018-03-29 12:10:00.000000,2018,1.0
141,How to Write Deployment-friendly Applications,"The DevOps movement gave us many ways to put Python applications into production.  But should your application care?  Should it need to know whether it’s running on your notebook, on a server, in a Docker container, or in some cloud platform as a service?  It should not, because environment-agnostic applications are easier to test, easier to deploy, easier to handle, and easier to scale.  But how can you practically structure and configure your applications to make them indifferent to the environment they run in?  How do secrets fit into the picture?  And where do you put that log file?  By the end of this talk you’ll know the tools and techniques that enable you to write such Python applications and you’ll be ready for the next big change.",Hynek Schlawack,2018-04-19 00:59:20.874877,2018-04-19 00:59:20.874877,Grand Ballroom A,2018-03-29 16:15:00.000000,2018,1.0
142,How we designed an inclusivity-first conference on a shoestring budget and short timeline,"New conferences rarely have resources to run the sort of outreach and inclusion programs that big conferences have. It’s hard to guess how much money you’ll have to spend, how many attendees you’ll have, and what your new community will look like. With so many things to worry about, it’s no surprise that most events don’t prioritise outreach until they’ve got a few years under their belt, if at all.  It doesn’t have to be this way, and it can even be easier to build a new event around outreach and inclusion than it is to build it in later on!  This talk shares the story of North Bay Python’s inaugural conference, which we planned in under 6 months, ran on a $40,000 budget, and built a welcoming community to make it real. We made inclusivity a founding principle and did so without compromising our speaker lineup while still attracting great sponsorship and hosted an event that almost every attendee wants to return to.  In this talk, we’re going to share with you how we built a conference, from the ground up, to be as inclusive as we could make it. We’ll touch on early organisation, marketing, and on-the ground logistics. Throughout the talk, you’ll learn:   How we designed a budget that let us prioritise outreach and inclusion activities How we built the community that we wanted before the conference even started How we ran an event that proved that we meant everything we said   You too can host a new conference with a great lineup on a shoestring budget and short timeline, and you can do it while being inclusive, welcoming, and putting attendee safety first. Find out how you can have your cake, eat it, and still have lots to share with your new community.","Christopher Neugebauer, Josh Simmons, Sam Kitajima-Kimbrel",2018-04-19 00:59:20.879374,2018-04-19 00:59:20.879374,Room 26A/B/C,2018-03-29 10:50:00.000000,2018,1.0
143,How We Do Identity Wrong,"Most software has a user. Depending on the software, the user may need to provide various details about themselves for proper operation -- their name, their date of birth, where they live. However, it is quite common for software systems such as these to ask the wrong questions, collect too much data, and when it comes down to it, serialise the parts of the user's identity wrongly. This talk will discuss common ways that real-world systems store identity wrong, what questions you shouldn't ask, and how you can fix it in your own projects.","                Amber Brown (""HawkOwl"")",2018-04-19 00:59:20.883453,2018-04-19 00:59:20.883453,Global Center Ballroom AB,2018-03-29 14:30:00.000000,2018,1.0
144,import time_travel: A Primer on Timezones in Python,"Timezones are one of those things every programmer loves to hate. Most of us, at least in the US, just try to ignore them and hope nobody notices. Then twice a year, we fear with impending doom those 3 small words: Daylight Saving Time.  It doesn't have to be this way. Armed with some best practices and a little help from supporting libraries, timezone-related bugs can be a thing of the past.  This talk explores standard library and 3rd party library timezone support, as well as persistence and serialization techniques for timezone-aware datetimes. By the end of the talk, the listener should feel confident in their ability to correctly store, send, receive, and manipulate datetime objects in any timezone.",David Gouldin,2018-04-19 00:59:20.887276,2018-04-19 00:59:20.887276,Grand Ballroom C,2018-03-29 12:10:00.000000,2018,1.0
145,Inside the Cheeseshop: How Python Packaging Works,"Questions and confusion about the Python packaging ecosystem abound. What is this setup.py file? What's the difference between wheels and eggs? Do I use setuptools or distutils? Why should I use twine? Do I put my projects dependencies in a requirements.txt or in setup.py? How do I just get my module up on PyPI? Wait, what is Warehouse?  This talk will identify the key tools one might encounter when trying to distribute Python software, what they are used for, why they exist, and their history (including where their weird names come from). In addition, we'll see how they all work together, what it takes to make them work, and what the future has in store for Python packaging.",Dustin Ingram,2018-04-19 00:59:20.891093,2018-04-19 00:59:20.891093,Room 26A/B/C,2018-03-29 11:30:00.000000,2018,1.0
146,Learning From Failure: Post Mortems,"Unless you work on pacemakers or at NASA, you've probably accepted the fact that you will make mistakes in your code, and those mistakes will creep into production. This talk will introduce you to post-mortems, and how to use them as a vehicle for improving your code and your process.",Alex Gaynor,2018-04-19 00:59:20.894945,2018-04-19 00:59:20.894945,Grand Ballroom C,2018-03-29 13:50:00.000000,2018,1.0
147,"Listen, Attend, and Walk : Interpreting natural language navigational instructions","Imagine you have an appointment in a large building you do not know. Your host sent instructions describing how to reach their office. Though the instructions were fairly clear, in a few places, such as at the end, you had to infer what to do. How does a robot (agent) interpret an instruction in the environment to infer the correct course of action? Enabling harmonious Human - Robot Interaction is of primary importance if they are to work seamlessly alongside people.  Dealing with natural language instructions in hard because of two main reasons, first being, Humans - through their prior experience know how to interpret natural language but agents can’t, and second is overcoming the ambiguity that is inherently associated with natural language instructions. This talk is about how deep learning models were used to solve such complex and ambiguous problem of converting natural language instruction into its corresponding action sequence.  Following verbal route instructions requires knowledge of language, space, action and perception. In this talk I shall be presenting, a neural sequence-to-sequence model for direction following, a task that is essential to realize effective autonomous agents.  At a high level, a sequence-to- sequence model is an end-to-end model made up of two recurrent neural networks:    Encoder - which takes the model’s input sequence as input and encodes it into a fixed-size context vector. Decoder - which uses the context vector from above as a seed from which to generate an output sequence.    For this reason, sequence-to-sequence models are often referred to as encoder-decoder models. The alignment based encoder-decoder model would translate the natural language instructions into corresponding action sequences. This model does not assume any prior linguistic knowledge: syntactic, semantic or lexical. The model learns the meaning of every word, including object names, verbs, spatial relations as well as syntax and the compositional semantics of the language on its own.  In this talk, steps involved in pre-processing of data, training the model, testing the model and final simulation of the model in the virtual environment will be discussed. This talk will also cover some of the challenges and trade-offs made while designing the model.",Padmaja Bhagwat,2018-04-19 00:59:20.898939,2018-04-19 00:59:20.898939,Grand Ballroom B,2018-03-29 16:30:00.000000,2018,1.0
148,Love your bugs,"Wrestling bugs can be one of the most frustrating parts of programming - but with the right framing, bugs can also be our best allies. I'll tell the tales of two of my favorite bugs, including the time I triggered a DDOS of a logging cluster, and explain why I love them. I'll also give you concrete strategies for approaching tricky bugs and making them easier and more fun.",Allison Kaptur,2018-04-19 00:59:20.902800,2018-04-19 00:59:20.902800,Grand Ballroom C,2018-03-29 17:10:00.000000,2018,1.0
149,One weird trick to becoming a better software developer,"Those of us who have worked in software development for longer than a few years probably feel we have an intuitive sense of what a great developer is. Some traits come more easily to mind than others when it comes to identifying a great developer. In this talk we will take a slightly different approach to evaluating software development best practices, and identify one underrated skill common to great software developers: empathy. I hope to demonstrate that cognitive and emotional empathy skills are critical to good software development. We will explore ways to cultivate this trait in order to become better developers, both for our own sakes and for the sake of the teams in which we work.",Esther Nam,2018-04-19 00:59:20.906538,2018-04-19 00:59:20.906538,Global Center Ballroom AB,2018-03-29 12:10:00.000000,2018,1.0
150,Oops! I Committed My Password To GitHub!,"What do AWS, GitHub, Travis CI, DockerHub, Google, Stripe, New Relic, and the rest of the myriad of services that make our developer life easier have in common?  They all give you secret keys to authenticate with. Did you ever commit one of these to source control by mistake? That happened to me more times than I'm willing to admit!  In this talk I'm going to go over the best practices to follow when writing Python applications that prevent this type of accident.",Miguel Grinberg,2018-04-19 00:59:20.910144,2018-04-19 00:59:20.910144,Grand Ballroom C,2018-03-29 11:30:00.000000,2018,1.0
151,Performance Python: Seven Strategies for Optimizing Your Numerical Code,"Python provides a powerful platform for working with data, but often the most straightforward data analysis can be painfully slow. When used effectively, though, Python can be as fast as even compiled languages like C. This talk presents an overview of how to effectively approach optimization of numerical code in Python, touching on tools like numpy, pandas, scipy, cython, numba, and more.",Jake VanderPlas,2018-04-19 00:59:20.915717,2018-04-19 00:59:20.915717,Grand Ballroom C,2018-03-29 11:30:00.000000,2018,1.0
152,Practical Sphinx,"Each member of your project team uses something different to document their work -- RestructuredText, Markdown, and Jupyter Notebooks. How do you combine all of these into useful documentation for your project's users. Sphinx and friends to the rescue!  Learn how to integrate documentation into your everyday development workflow, apply best practices, and use modern development tools and services, like Travis CI and ReadTheDocs, to create engaging and up-to-date documentation which users and contributors will love.",Carol Willing,2018-04-19 00:59:20.920561,2018-04-19 00:59:20.920561,Grand Ballroom A,2018-03-29 11:30:00.000000,2018,1.0
153,Pumping up Python modules using Rust,"If you’ve spent much time writing (or debugging) Python performance problems, you’ve probably had a hard time managing memory with its limited language support.   In this talk, we venture deep into the belly of the Rust Language to uncover the secret incantations for building high performance and memory safe Python extensions using Rust.   Rust has a lot to offer in terms of safety and performance for high-level programming languages such Python, Ruby, Js and more with its easy Foreign Function Interface capabilities which enables developers to easily develop bindings for foreign code.",vigneshwer dhinakaran,2018-04-19 00:59:20.924932,2018-04-19 00:59:20.924932,Global Center Ballroom AB,2018-03-29 13:50:00.000000,2018,1.0
154,Python 2 to 3: How to Upgrade and What Features to Start Using,The end of life for Python 2 is 2020. Python 3 is the future and you'll need to consider both your upgrade plan and what steps you'll take after upgrading to start leveraging Python 3 features.  During this talk we'll briefly discuss how to start the process of upgrading your code to Python 3. We'll then dive into some of the most useful Python 3 features that you'll be able to start embracing once you drop Python 2 support.  A number of the most powerful Python 3 features are syntactic features that are Python 3 only. You won't get any experience using these features until you fully upgrade. These features are an incentive to drop Python 2 support in existing 2 and 3 compatible code. You can consider this talk as a teaser of Python 3 features that you may have never used.  After this talk I hope you'll be inspired to fully upgrade your code to Python 3.,Trey Hunner,2018-04-19 00:59:20.929447,2018-04-19 00:59:20.929447,Grand Ballroom C,2018-03-29 16:30:00.000000,2018,1.0
155,Python 3: ten years later,"Looking back at Python evolutions over the last 10 years.  Python 3.0 was released ten years ago (December 2008). It's time to look back: analyze the migration from Python 2 to Python 3, see the progress we made on the language, list bugs by cannot be fixed in Python 2 because of the backward compatibility, and discuss if it's time or not to bury Python 2.  Python became the defacto language in the scientific world and the favorite programming language as the first language to learn programming.",Victor Stinner,2018-04-19 00:59:20.940580,2018-04-19 00:59:20.940580,Grand Ballroom B,2018-03-29 15:15:00.000000,2018,1.0
156,Python across the USA: This is the Bus.,"For 2 years, a family of three has traveled on a converted school bus from conference to conference, building tooling for the road in Python and visiting Python families in every corner of the country.",Justin Myles Holmes,2018-04-19 00:59:20.949173,2018-04-19 00:59:20.949173,Grand Ballroom A,2018-03-29 14:35:00.000000,2018,1.0
157,Python Data Sonification for Science and Discovery,"What do geiger counters, black holes, heart monitors, and volcanoes have in common?  They all can use sound to convey information! This talk will explore using python for sonification: the process of translating data into sound that could otherwise be represented visually. Have you ever wondered how to use python to represent data other than making charts and graphs?  Are you a musician looking for inspiration in the world around you?  This talk will go over how to use python to translate time series data to MIDI that can be played back in real time. We’ll sonically interpret light-curve data from the Kepler space telescope using pygame, MIDIUtil, and astropy, turning points on a graph into a musical masterpiece! Come learn about how data sonification is used to help people, to expand the reach of scientific research, and to create music from data.",Erin Braswell,2018-04-19 00:59:20.957083,2018-04-19 00:59:20.957083,Global Center Ballroom AB,2018-03-29 10:50:00.000000,2018,1.0
158,Python for the quantum computing age,"Quantum computers are slowly turning in to reality more than 30 years after they were first theorized. The need for quantum computers have become clear as we reach the limits of Moore’s law and yet we need more computational power. We are at a very early stage of quantum computing. Yet Python is slowly becoming a defacto language for programming quantum computers.   In this talk, we will discuss the difference a traditional computer and a quantum computer. We will learn about the two architectures namely Quantum annealing and Quantum gate. Finally, we will learn to program quantum computers using Python.",Ravi Chityala,2018-04-19 00:59:20.961916,2018-04-19 00:59:20.961916,Room 26A/B/C,2018-03-29 15:15:00.000000,2018,1.0
159,"Python, Locales and Writing Systems","Python 3 removes a lot of the confusion around Unicode handling in Python, but that by no means fixes everything. Different locales and writing systems have unique behaviours that can trip you up. Here’s some of the worst ones and how to handle them correctly.",Rae Knowler,2018-04-19 00:59:20.965921,2018-04-19 00:59:20.965921,Global Center Ballroom AB,2018-03-29 17:10:00.000000,2018,1.0
160,Python Performance Investigation by Example,"Occasionally we’ll find that some bit of Python we’ve written doesn’t run as fast as we’d like, what can we do? Performance bottlenecks aren’t always intuitive or easy to spot by reading code so we need to collect data with profiling. Once we’ve identified the bottleneck we’ll need to change our approach, but what options are faster than others?  This talk illustrates a Python performance investigation and improvements using an Advent of Code programming challenge. I’ll walk through starting from a slow (but correct) solution, look at profiling data to investigate why it’s slow, and explore multiple paths for improving performance, including more efficient algorithms and using third-party tools like Cython. You’ll leave this talk with a recipe for analyzing Python performance and information about some options for improved performance.",Matt Davis,2018-04-19 00:59:20.970004,2018-04-19 00:59:20.970004,Room 26A/B/C,2018-03-29 16:30:00.000000,2018,1.0
161,Randomness in Python: Creating Chaos in an Ordered Machine/Controlled Environment,"There are many computational needs for randomness--from creating a game to building a simulation involving naturally occurring randomness similar to the physical world. For most purposes using the python math module to create random numbers within a specific range can be done with no further questions, but sometimes we require a more nuanced implementation.   We will look at both pseudo-random number generators, which use statistically repeatable processes to generate seemingly random series and true random number generators, which inject physical processes like atmospheric noise to generate sequences of numbers. We will discuss the benefits and drawbacks of both approaches and common methods of implementing these two types of generators in python.   Finally, we will look at several real applications for randomness and discuss the best method for generating “randomness” in each scenario.",Amanda Sopkin,2018-04-19 00:59:20.974344,2018-04-19 00:59:20.974344,Room 26A/B/C,2018-03-29 14:35:00.000000,2018,1.0
162,Reactive Programming with RxPy,"Web applications contains lots of database operations, network calls, nested callbacks and other computationally expensive tasks that might take a long time to complete or even block other threads until it's done, here is where ReactiveX enters, it doesn't only gives us the facility to convert almost anything to a stream; variables, properties, user inputs, caches, etc to manage it asynchronously. But it also gives us an easy way to handle errors which is a hard task within asynchronous programming. ReactiveX makes our code more flexible, readable, maintainable and easy to write.  We will be exploring how ReactiveX help us to make things easier with its operators toolbox that can be used to filter, create, transform or unify any of those streams. We will learn that in just a few lines of maintainable code, we can have multiple web sockets which recieves multiple requests all handled by an asynchronous process that serves a filtered output.  To do that I decided to explain an example of the use with an example by implementing observables, observers/subscribers and subjects. We will start by requesting our data stream from the Github API with a Tornado web socket and then filtering and processing it asynchrounosly.",Valery Calderon,2018-04-19 00:59:20.979310,2018-04-19 00:59:20.979310,Global Center Ballroom AB,2018-03-29 16:15:00.000000,2018,1.0
163,Reinventing the Parser Generator,"Writing lexers and parsers is a complex problem that often involves the use of special tools and domain specific languages (e.g., the lex/yacc tools on Unix).  In 2001, I wrote Python versions of these tools which can be found in the PLY project.  PLY predates a huge number of modern Python features including the iteration protocol, generators, decorators, metaclasses, and more.  As such, it relied on a variety of clever hacks to layer a domain specific parser specification language on top of Python itself.   In this talk, I discuss a modernization of the PLY project that abandons its past and freely abuses modern Python features including advanced metaclasses, guaranteed dictionary ordering, class decorators, type hints, and more.   The result of this work can be found in the SLY project.  However, this talk isn't so much about SLY as it is focused on how far you can push Python metaprogramming features to create domain-specific languages.   Prepare to be horrified--and to write code that will break your IDE.",David Beazley,2018-04-19 00:59:20.984004,2018-04-19 00:59:20.984004,Grand Ballroom C,2018-03-29 12:10:00.000000,2018,1.0
164,Secrets of a WSGI master.,"The WSGI (Web Server Gateway Interface) specification for hosting Python web applications was created in 2003. Measured in Internet time, it is ancient. The oldest main stream implementation of the WSGI specification is mod_wsgi, for the Apache HTTPD server and it is over 10 years old.  WSGI is starting to be regarded as not up to the job, with technologies such as HTTP/2, web sockets and async dispatching being the way forward. Reality is that WSGI will be around for quite some time yet and for the majority of use cases is more than adequate.  The real problem is not that we need to move to these new technologies, but that we aren't using the current WSGI servers to their best advantage. Moving to a new set of technologies will not necessarily make things better and will only create a new set of problems you have to solve.  As one of the oldest WSGI server implementations, Apache and mod_wsgi may be regarded as boring and not cool, but it is still the most stable option for hosting WSGI applications available. It also hasn't been sitting still, with a considerable amount of development work being done on mod_wsgi in the last few years to make it even more robust and easier to use in a development environment as well as production, including in containerised environments.  In this talk you will learn about many features of mod_wsgi which you probably didn't even know existed, features which can help towards ensuring your Python web application deployment performs to its best, is secure, and has a low maintenance burden.  Topics which will be covered include:   Easy deployment of Python web applications using mod_wsgi-express. Integration of mod_wsgi-express with a Django web application. Using mod_wsgi-express in a development environment. How to make use of mod_wsgi-express in a production environment. Using mod_wsgi-express in a containerised runtime environment. Ensuring consistency between development and production environments using warpdrive. Using mod_wsgi-express to bootstrap a system Apache installation for hosting WSGI applications. Why you should be using daemon mode of mod_wsgi and not embedded mode. How to properly associate mod_wsgi with a Python virtual environment. Building a robust deployment that can recover from misbehaving application code, backend services, or request overloading. Using hooks provided by mod_wsgi to monitor the performance of your Python web application.   If you are a beginner, come learn why mod_wsgi is still a good option for deploying your Python web applications. If you are an old time user of mod_wsgi, find out about all the features you probably didn't know existed, revisit your current Python web application deployment and make it even better.",Graham Dumpleton,2018-04-19 00:59:20.989283,2018-04-19 00:59:20.989283,Room 26A/B/C,2018-03-29 17:10:00.000000,2018,1.0
165,Software Library APIs: Lessons Learned from scikit-learn,"When you think of an API, you’re probably thinking about a web service. But it’s important to think about your developer interface when designing a software library as well! I’ll talk about the scikit-learn package, and how its API makes it easy to construct complex models from simple building blocks, using three basic pieces: transformers, estimators, and meta-estimators. Then I’ll show how this interface enabled us to construct our own meta-estimator for model stacking. This will demonstrate how to implement new modeling techniques in a scikit-learn style, and more generally, the value of writing libraries with the developer interface in mind.",Liz Sander,2018-04-19 00:59:20.994251,2018-04-19 00:59:20.994251,Grand Ballroom A,2018-03-29 13:40:00.000000,2018,1.0
166,Solve Your Problem With Sloppy Python,"Stop writing crappy shell scripts—write crappy Python scripts instead!  Other talks will show you how to write clean, performant, robust Python.  But that's not always necessary.  When writing personal automation or solving one-shot problems, it can be safe (and fun!) to quickly hack something together.  This talk will show examples of problems suitable for this approach, scenarios where it's reasonable to cut corners, novel techniques that can help break a problem down, and shortcuts that can speed development.",Larry Hastings,2018-04-19 00:59:21.001207,2018-04-19 00:59:21.001207,Grand Ballroom C,2018-03-29 10:50:00.000000,2018,1.0
167,Strategies to Edit Production Data,"At some point, we all find ourselves at a SQL prompt making edits to the production database. We know it's a bad practice and we always intend to put in place safer infrastructure before we need to do it again — what does a better system actually look like?  This talk progresses through 5 strategies for teams using a Python stack to do SQL writes against a database, to achieve increasing safety and auditability:  (1) Develop a process for raw SQL edits  (2) Run scripts locally (3) Deploy and run scripts on an existing server (4) Use a task runner (5) Build a Script Runner service  We’ll talk about the pros and cons of each strategy and help you determine which one is right for your specific needs.  By the end of this talk you’ll be ready to start upgrading your infrastructure for making changes to your production database safely!",Julie Qiu,2018-04-19 00:59:21.008595,2018-04-19 00:59:21.008595,Room 26A/B/C,2018-03-29 11:30:00.000000,2018,1.0
168,Surviving (and thriving!) when you are overloaded,"Taking on leadership roles always includes new demands on your attention and time. Inevitably, your finite work week will conflict with the sheer amount of tasks you have to do. How can we as leaders keep stepping up to new responsibilities while balancing our pre-existing ones?  This talk will focus on strategies for managing a too-large workload without abandoning important tasks or doing a shoddy job. We’ll look at techniques to prioritize what work matters most, identify tasks we should be doing ourselves, and finally delegate the rest to build our team’s skills while reducing our own workload.",Scott Triglia,2018-04-19 00:59:21.012756,2018-04-19 00:59:21.012756,Global Center Ballroom AB,2018-03-29 15:15:00.000000,2018,1.0
169,Systemd: why you should care as a Python developer,"Done! Your shiny new application is functionally complete and ready to be deployed to production! But how exactly do you deploy properly on Linux? Wonder no more! In 30 minutes, this talk explains how you can harness the power of the init system and systemd to solve common deployment problems, including some that you didn't even know you had. Examples of things we will cover:   How to secure your system by having: private /tmp for your process, read-only paths so that your process can not write to them, inaccessible paths, protect users home, network access, bin directories, etc. How to limit the resources you app can consume. How to interact directly with systemd, so it can start transient units, start/stop services, mount disks, resolve addresses. How to isolate your service without containers. How to isolate your service using containers (using systemd to spawn a namespace).   All this will be covered from a Python developer's perspective.",Alvaro Leiva Geisse,2018-04-19 00:59:21.016636,2018-04-19 00:59:21.016636,Grand Ballroom C,2018-03-29 13:10:00.000000,2018,1.0
170,Tackling Technical Writing,"Empathetic, accessible, and thorough technical tutorials & blog posts break down Python’s barrier to entry and foster inclusion. Thus, Python’s fate rests on people who write well – an oft underdeveloped skill. In this talk, I’ll give actionable pointers to get people started with technical writing.",Alaina Kafkes,2018-04-19 00:59:21.020479,2018-04-19 00:59:21.020479,Grand Ballroom A,2018-03-29 12:10:00.000000,2018,1.0
171,Taking Django Async,"The Django Channels project has taken a major turn with version 2.0, embracing Python's async functionality and building applications around an async event loop rather than worker processes.  Doing this, however, wasn't easy. We'll look through some of the techniques used to make Django coexist in this async world, including handing off between async and sync code, writing fully asynchronous HTTP and WebSocket handling, and what this means for the future of Django, and maybe Python web frameworks in general.",Andrew Godwin,2018-04-19 00:59:21.024608,2018-04-19 00:59:21.024608,Grand Ballroom C,2018-03-29 15:15:00.000000,2018,1.0
172,The AST and Me,"Get under the hood and learn about Python's beloved Abstract Syntax Tree. Ever wonder how Python code is run? Overheard people arguing about whether Python is interpreted or compiled? In this talk, we will delve into the lifecycle of a piece of Python code in order to understand the role that Python's Abstract Syntax Tree plays in shaping the runtime of your code. Utilizing your newfound knowledge of Python's AST, you'll get a taste of how you probably already rely on ASTs and how they can be used to build awesome tools.",Emily Morehouse-Valcarcel,2018-04-19 00:59:21.028885,2018-04-19 00:59:21.028885,Grand Ballroom B,2018-03-29 15:15:00.000000,2018,1.0
173,The Hare Wins the Race: Getting the most out of RabbitMQ in distributed applications,"As web apps grow increasingly complex, distributing asynchronous work across multiple background workers is often a basic requirement of a performant app.  While there are a variety of tools that exist to solve this issue, one common feature among them is the need for a robust messaging platform.  RabbitMQ is a stable, full-featured, and mature solution that is usually found in the Python ecosystem backing Celery implementations.  While Celery's utilization of RabbitMQ works just fine out of the gate, users with complex workflows, unique constraints, or tight budgets can take advantage of the flexibility of RabbitMQ to streamline their data pipelines and get the most out of their infrastructure.  This talk will provide an overview of RabbitMQ, review its varied message-routing capabilities, and demonstrate some of the ways in which these features can be utilized in Python applications to solve common yet difficult use-cases.",Steven Sklar,2018-04-19 00:59:21.032692,2018-04-19 00:59:21.032692,Grand Ballroom A,2018-03-29 13:50:00.000000,2018,1.0
174,The human nature of failure & resiliency,"Projects fail in droves. Systems hiccup and hours of downtime follows. Screws fall out all the time; the world is an imperfect place.  We talk a lot about building resilient systems, but all systems are (at least for now) built by humans. Humans who have been making the same types of mistakes for thousands of years.   Just because failure happens doesn’t mean we can’t do our best to prevent it or—at the very least—to minimize the damage when it does. As a matter of fact, embracing failure can be one of the best things you do for your system. Failure is a vital part of evolution. By learning to love failure we learn how to take the next step forward. Ignoring or punishing failure leads to stagnation and wasted potential.  This talk distills 3000 pages of failure research into 40 minutes of knowledge about the human factors of failure, how it can be recognised, and how you can work around it to create more resilient systems.  By the end of this talk the audience will have an awareness of the most common psychological reasons for mistakes and failures and how to develop systems and processes to protect against them.",VM (Vicky) Brasseur,2018-04-19 00:59:21.036641,2018-04-19 00:59:21.036641,Room 26A/B/C,2018-03-29 15:15:00.000000,2018,1.0
175,The importance of exploratory data analysis and data visualization in machine learning,"All the data in the world is useless if you cannot understand it. EDA and data visualization are the most crucial yet overlooked stage in analytics process. This is because they give insights on the most relevant features in a particular data set required to build an accurate model. It is often said that the more the data, the better the model but sometimes, this can be counter-productive as more data can be a disadvantage. EDA helps avoid that.  EDA is useful for professionals while data visualization is useful for end-users.   For end-users:  A good sketch is better than a long speech. The value of a machine learning model is not known unless it is used to make data driven decisions. It is therefore necessary for data scientists to master the act of telling a story for their work to stay relevant. This is where data visualization is extremely useful.  We must remember that the end-users of the results are not professionals like us but people who know little or nothing about data analysis. For effective communication of our analysis, there is need for a detailed yet simple data visualization because the work of a data scientist is not done if data-driven insights and decisions are not made.  For professionals: How do you ensure you are ready to use machine learning algorithms in a project? How do you choose the most suitable algorithms for your data set? How do you define the feature variables that can potentially be used for machine learning? Most data scientists ask these questions.  EDA answers these questions explicitly. Also, EDA helps in understanding the data. Understanding the data brings familiarity with the data, giving insights on the best models that fit the data set, the features in the dataset that will be useful for building an accurate machine learning model, making feature engineering an easy process.  In this talk, I will give a detailed explanation on what EDA and data visualization are and why they are very helpful in building accurate machine learning models for analytics as well as enhancing productivity and better understanding for clients. I will also discuss the risks of not mastering EDA and data visualization as a data scientist.",Opetunde Adepoju,2018-04-19 00:59:21.041024,2018-04-19 00:59:21.041024,Room 26A/B/C,2018-03-29 13:55:00.000000,2018,1.0
176,The Journey Over the Intermediate Gap,"Congratulations on finishing your first tutorials or classes in python! In the parlance of the hero’s journey myth, you’ve had your ‘threshold moment”: you’ve started down a path that could lead to a long and fulfilling career. But the road to this glorious future is frustratingly obscured by a lack of guidance in the present. You know enough to realize that you don’t have all the skills you need yet, but it’s hard to know how to learn those skills, or even articulate what they are. There are no easy solutions to this problem. There are, however, a few fundamental things to know and advice to keep in mind. Drawing from my own experience and with input from others, I’ve compiled some helpful hints about the skills, tools, and guiding questions that will get you to mastery.",Sara Packman,2018-04-19 00:59:21.045802,2018-04-19 00:59:21.045802,Grand Ballroom A,2018-03-29 17:10:00.000000,2018,1.0
177,The Python Side of Vim,"Where do you spend time during development? Typing code? Or developing your project? Most IDEs help developers do the latter; describing rather than implementing. For example, if you intend to create a function, most text editors provide you with a function template, instead of you typing it out. This saves time and energy, and also increases productivity. Vim is such an editor. It is a highly configurable text editor built to make creating and changing any kind of text very efficient. In fact, it is more of a developers swiss army knife, than just an editor. Just as Vim can be used to write Python scripts, Python can also be used to write Vim scripts. In this talk, we would be taking a look at how Python can be used to enhance the functionality of Vim, and also how ""descriptive coding"" can make you a better developer. . ",Aaron Yankey,2018-04-19 00:59:21.050603,2018-04-19 00:59:21.050603,Global Center Ballroom AB,2018-03-29 14:35:00.000000,2018,1.0
178,There and Back Again: Disable and re-enable garbage collector at Instagram,"Python's cyclic garbage collector wonderfully hides the complexity of memory management from the programmer. But we pay the price in performance. Ever wondered how that works? In this talk, you'll learn how garbage collection is designed in Python, what the tradeoffs are and how Instagram battled copy-on-write memory issues by disabling the garbage collector entirely.  You'll also learn why that isn't such a great idea after all and how we ended up extending the garbage collector API which allowed us to (mostly) re-enable garbage collection. We'll discuss our upstream contributions to the garbage collector that landed in Python 3.6 and 3.7.  This is an in-depth talk about memory management but no prior experience with CPython internals is necessary to follow it.",Zekun Li,2018-04-19 00:59:21.055058,2018-04-19 00:59:21.055058,Grand Ballroom A,2018-03-29 13:10:00.000000,2018,1.0
179,Thinking Outside the GIL with AsyncIO and Multiprocessing,"Have you ever written a small, elegant application that couldn't keep up with the growth of your data or user demand? Did your beautiful design end up buried in threads and locks? Did Python's very special Global Interpreter Lock make all of this an exercise in futility?  This talk is for you! With the combined powers of AsyncIO and multiprocessing, we'll redesign an old multithreaded application limited by the GIL into a modern solution that scales with the demand using only the standard library. No prior AsyncIO or multiprocessing experience required.",John Reese,2018-04-19 00:59:21.059953,2018-04-19 00:59:21.059953,Global Center Ballroom AB,2018-03-29 10:50:00.000000,2018,1.0
180,Trio: Async concurrency for mere mortals,"Concurrent programs are super useful: think of web apps juggling lots of simultaneous downloads and websocket connections, chat bots tracking multiple concurrent conversations, or web spiders fetching pages in parallel. But writing concurrent programs is complicated, intimidating to newcomers, and often challenging even for experts.  Does it have to be? Python is famous for being simple and straightforward; can Python make concurrent programming simple and straightforward too? I think so. By carefully analyzing usability pitfalls in other libraries, and taking advantage of new Python 3 features, I've come up with a new set of primitives that make it dramatically easier to write correct concurrent programs, and implemented them in a new library called Trio. In this talk, I'll describe these primitives, and demonstrate how to use them to implement a basic algorithm for speeding up TCP connections. Compared to the best previous Python implementation, our version turns out to be easier to understand, more correct, and dramatically shorter.  This talk assumes basic familiarity with Python, but does not require any prior experience with concurrency, async/await, or networking.",Nathaniel J. Smith,2018-04-19 00:59:21.066225,2018-04-19 00:59:21.066225,Grand Ballroom C,2018-03-29 16:30:00.000000,2018,1.0
181,Type-checked Python in the real world,"You've heard about Python type annotations, but wondered if they're useful in the real world? Worried you've got too much code and can't afford to annotate it?  Type-checked Python is here, it's for real, and it can help you catch bugs and make your code easier to understand. Come learn from our experience gradually typing a million-LOC production Python application!  Type checking solves real world problems in production Python systems. We'll cover the benefits, how type checking in Python works, how to introduce it gradually and sustainably in a production Python application, and how to measure success and avoid common pitfalls. We'll even demonstrate how modern Python typechecking goes hand-in-hand with duck-typing! Join us for a deep dive into type-checked Python in the real world.",Carl Meyer,2018-04-19 00:59:21.073781,2018-04-19 00:59:21.073781,Global Center Ballroom AB,2018-03-29 13:10:00.000000,2018,1.0
182,"Types, Deeper Static Analysis, and you","Many projects already take advantage of static analysis tools like flake8, PyLint, and MyPy. Can we do better? In this talk, I'll discuss how to take a type checker, bolt on an interprocedural static analyzer, and delight your security team with high quality results.  Abstract   It is incredibly challenging to build a halfway decent static analysis tool for a dynamic language like Python. Fortunately, it gets quite a bit easier with Python type annotations. To explain why, I'll present a tool that finds security vulnerabilities by tracking dangerous flows of information interprocedurally across an entire codebase. Then, I'll demonstrate how that tool is really just a slightly slower, more sophisticated, type checker.",Pieter Hooimeijer,2018-04-19 00:59:21.077867,2018-04-19 00:59:21.077867,Room 26A/B/C,2018-03-29 14:30:00.000000,2018,1.0
183,User focused API Design,"When we talk about Web API Design, we're usually driven to think in architecture, verbs, and nouns. But we often forget our user: the developer.  UX designers rely on many techniques to create great experiences. User research, User Testing, Personas, Usage Data Analysis and others. However when creating invisible products we’re not used to think in usability. So why don’t we take advantage of this background to improve our APIs experiences?",Renato Oliveira,2018-04-19 00:59:21.081849,2018-04-19 00:59:21.081849,Grand Ballroom B,2018-03-29 14:30:00.000000,2018,1.0
184,Using Python to build an AI to play and win SNES StreetFighter II,"Hear the story of how we used Python to build an AI that plays Super StreetFighter II on the Super NES. We'll cover how Python provided the key glue between the SNES emulator and AI, and how the AI was built with gym, keras-rl and tensorflow. We'll show examples of game play and training, and talk about which bot beat which bot in the bot-v-bot tournament we ran.   After this talk you'll know how easy it is to use Python and Python's machine learning libraries to teach a computer to play games.  You'll see a practical example of the same type of machine learning used by AlphaGo, and also get to find out which character in StreetFighter II is best to pick when playing your friends.","Adam Fletcher, Jonathan Mortensen",2018-04-19 00:59:21.085615,2018-04-19 00:59:21.085615,Grand Ballroom C,2018-03-29 13:55:00.000000,2018,1.0
185,Visualizing Algorithms with Python and Programmable LEDs,"Recently, a new LED strip specification, APA102, has been released which allows these strips to be driven by a general purpose CPU instead of a dedicated microcontroller. This allows us the luxury of controlling them with Python!  I'll teach you about how to get the the hardware, how to think about programming for lights and how to build anything from a psychedelic art installation to home lighting to an educational tool.   Programming with lights is awesome because you can SEE bugs with your eyes. I think the use of these LED's have great potential as a teaching tool because of the immediacy of the feedback.  LIVE hardware demos!  See Quicksort in brilliant colors!",Christopher Beacham / Lady Red,2018-04-19 00:59:21.089188,2018-04-19 00:59:21.089188,Grand Ballroom A,2018-03-29 10:50:00.000000,2018,1.0
186,Visual Testing with PyCharm and pytest,"Know you should be doing testing but haven’t gotten over the hurdle to learn it? pytest is Python’s modern, friendly, and powerful testing framework. When paired with an IDE, testing gets a visual interface, making it much easier to get started.  In this talk we cover “visual testing”: starting, learning, using, and mastering test-driven development (TDD) with the help of a nice UI. We’ll show PyCharm Community Edition, a free and open-source Python IDE, as a productive TDD environment for pytest. Specifically, we’ll show a workflow using pytest and PyCharm that helps make tests speed up development, or at the very least help to make testing seem less ""in the way"" of other development activities","Brian Okken, Paul Everitt",2018-04-19 00:59:21.093337,2018-04-19 00:59:21.093337,Grand Ballroom A,2018-03-29 17:10:00.000000,2018,1.0
187,What is a Python Core Developer?,"How do you become a Python core developer? How can I become one? What is it like to be a Python core developer?  These are the questions I often receive ever since I became a Python core developer a year ago. Contributing to Python is a long journey that does not end when one earns the commit privilege. There are responsibilities to bear and expectations to live up to.  In the past year, I've been learning more about what it really means to be a Python core developer. Let me share all of that with you.",Mariatta Wijaya,2018-04-19 00:59:21.097896,2018-04-19 00:59:21.097896,Global Center Ballroom AB,2018-03-29 16:15:00.000000,2018,1.0
188,"""WHAT IS THIS MESS?"" - Writing tests for pre-existing code bases","Many of us practice test driven development, and pride ourselves in our code coverage. This is relatively easy to do when you begin a new project, but what happens when you take over an existing code base with little to no tests? Where and how do you start writing tests? This task can be very intimidating and frustrating, but can be accomplished!  This talk will run through some common approaches and methodologies for adding test coverage to pre-existing code (that you might not even be familiar with at all). The next time you take over an untested monolith,  you will be able to do the right thing and start writing tests instead of hoping for the best!",Justin Crown,2018-04-19 00:59:21.101953,2018-04-19 00:59:21.101953,Global Center Ballroom AB,2018-03-29 12:10:00.000000,2018,1.0
189,Win back lovely API: GraphQL in Python,"RESTful has been the go-to choice of API world. Why another API approach? To support more data-driven applications, to provide more flexibility and ease unnecessary code and calls, to address a wide variety of large-scale development problems, GraphQL comes with HTTP, JSON, Versioning, Nullability, Pagination, and Server-side Batching & Caching in mind to make API ""Simple yet Powerful"".  By applying Graphene-Python, a library for building GraphQL APIs in Python easily, this talk will go through the background and challenges of applying GraphQL as the new API service in a restaurant POS (point of sale) system within complex cloud infrastructure in Python. Introduction, testing, and live demo is included for sure.",Keith Yang,2018-04-19 00:59:21.106224,2018-04-19 00:59:21.106224,Global Center Ballroom AB,2018-03-29 13:40:00.000000,2018,1.0
190,You're an expert. Here's how to teach like one.,"Knowing how to code and being able to teach it are two separate skills. When we have expertise in a subject, it's common to take for granted that we'll be able to effectively communicate our expertise to someone else. Come learn (or re-learn!) how to teach and discover practical examples you can put to work right away.  By sharpening your teaching skills, you'll be a more effective mentor, trainer, and team member.",Shannon Turner,2018-04-19 00:59:21.110696,2018-04-19 00:59:21.110696,Grand Ballroom B,2018-03-29 14:35:00.000000,2018,1.0
